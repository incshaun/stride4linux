<!--
// Copyright (c) .NET Foundation and Contributors (https://dotnetfoundation.org/ & https://stride3d.net)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.
//
// Original code:
// (c) Copyright Microsoft Corporation.
// This source is subject to Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->
<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:ctrl="clr-namespace:Stride.Core.Presentation.Controls;assembly=Stride.Core.Presentation.Avalonia"
                    xmlns:cmd="clr-namespace:Stride.Core.Presentation.Commands;assembly=Stride.Core.Presentation.Avalonia"
                    xmlns:cvt="clr-namespace:Stride.Core.Presentation.ValueConverters;assembly=Stride.Core.Presentation.Avalonia"
                    xmlns:me="clr-namespace:Stride.Core.Presentation.MarkupExtensions;assembly=Stride.Core.Presentation.Avalonia"
                    xmlns:behaviors="clr-namespace:Stride.Core.Presentation.Behaviors;assembly=Stride.Core.Presentation.Avalonia"
                    xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
                    xmlns:interactivity="clr-namespace:Stride.Core.Presentation.Interactivity;assembly=Stride.Core.Presentation.Avalonia"
                    xmlns:commands="clr-namespace:Stride.Core.Presentation.Controls.Commands;assembly=Stride.Core.Presentation.Avalonia"
                    xmlns:diag="clr-namespace:Stride.Core.Presentation.Windows;assembly=Stride.Core.Presentation"
                    xmlns:wnd="clr-namespace:Stride.Core.Presentation.Windows;assembly=Stride.Core.Presentation.Avalonia"
                    xmlns:local="clr-namespace:Stride.Core.Presentation"
                    xmlns:sd="http://schemas.stride3d.net/xaml/presentation"
                    xmlns:themes="clr-namespace:Stride.Core.Presentation.Themes;assembly=Stride.Core.Presentation.Avalonia"
                    
                    mc:Ignorable="d">
  <ResourceDictionary.MergedDictionaries>
    <ResourceInclude Source="generic.axaml" />
    <ResourceInclude Source="avares://Stride.Core.Presentation.Avalonia/Resources/VectorResources.axaml" />
	<ResourceInclude Source="../ValueConverters/SystemColors.axaml" />
    <!--
    // ExpressionDark is the default/fallback theme.
    // When adding a new theme, ensure all themes:ThemeResourceDictionary in every *.xaml files
    // are updated to ensure the theme is correctly applied.
    -->
    <themes:ThemeResourceDictionary Source="Overrides/ExpressionDarkTheme.axaml"
                                    ExpressionDarkSource="Overrides/ExpressionDarkTheme.axaml"
                                    DarkSteelSource="Overrides/DarkSteelTheme.xaml"
                                    DividedSource="Overrides/DividedTheme.axaml"
                                    LightSteelBlueSource="Overrides/LightSteelBlueTheme.axaml" />
  </ResourceDictionary.MergedDictionaries>

  <Geometry x:Key="GeometryDebugMessage">F1 M 46.5,19C 47.8807,19 49,20.1193 49,21.5C 49,22.8807 47.8807,24 46.5,24L 45.8641,23.9184L 43.5566,26.8718C 45.1489,28.0176 46.5309,29.6405 47.6023,31.6025C 44.8701,32.4842 41.563,33 38,33C 34.4369,33 31.1299,32.4842 28.3977,31.6025C 29.4333,29.7061 30.7591,28.1265 32.2844,26.9882L 29.9221,23.9646C 29.7849,23.9879 29.6438,24 29.5,24C 28.1193,24 27,22.8808 27,21.5C 27,20.1193 28.1193,19 29.5,19C 30.8807,19 32,20.1193 32,21.5C 32,22.0018 31.8521,22.4691 31.5976,22.8607L 34.0019,25.938C 35.2525,25.3305 36.5982,25 38,25C 39.3339,25 40.617,25.2993 41.8156,25.8516L 44.2947,22.6786C 44.1066,22.3274 44,21.9262 44,21.5C 44,20.1193 45.1193,19 46.5,19 Z M 54.5,40C 55.3284,40 56,40.6716 56,41.5C 56,42.3284 55.3284,43 54.5,43L 49.9511,43C 49.88,44.0847 49.7325,45.1391 49.5162,46.1531L 54.8059,48.6197C 55.5567,48.9698 55.8815,49.8623 55.5314,50.6131C 55.1813,51.3639 54.2889,51.6887 53.5381,51.3386L 48.6665,49.067C 46.8161,53.9883 43.2172,57.4651 39,57.9435L 39,34.9864C 42.541,34.8897 45.7913,34.283 48.4239,33.3201L 48.6187,33.8074L 53.73,31.8454C 54.5034,31.5485 55.371,31.9348 55.6679,32.7082C 55.9648,33.4816 55.5785,34.3492 54.8051,34.6461L 49.482,36.6895C 49.717,37.7515 49.8763,38.859 49.9511,40L 54.5,40 Z M 21.5,40L 26.0489,40C 26.1237,38.859 26.2829,37.7516 26.518,36.6895L 21.1949,34.6461C 20.4215,34.3492 20.0352,33.4816 20.332,32.7082C 20.6289,31.9348 21.4966,31.5485 22.27,31.8454L 27.3812,33.8074L 27.5761,33.3201C 30.2087,34.283 33.4589,34.8897 37,34.9864L 37,57.9435C 32.7827,57.4651 29.1838,53.9883 27.3335,49.067L 22.4618,51.3387C 21.711,51.6888 20.8186,51.3639 20.4685,50.6131C 20.1184,49.8623 20.4432,48.9699 21.194,48.6198L 26.4838,46.1531C 26.2674,45.1392 26.12,44.0847 26.0489,43L 21.5,43C 20.6716,43 20,42.3285 20,41.5C 20,40.6716 20.6716,40 21.5,40 Z</Geometry>
  <Geometry x:Key="GeometryVerboseMessage">F1 M 40.3806,19.0027C 49.5637,19.0027 57.008,23.611 57.008,29.2958C 57.008,32.9008 54.0141,36.073 49.4815,37.9115C 50.4478,39.7772 52.1442,41.8291 53.8406,44.4135C 50.3128,43.1826 45.0382,41.9924 41.9082,39.546L 40.3806,39.5889C 31.1976,39.5889 23.7533,34.9805 23.7533,29.2958C 23.7533,23.611 31.1976,19.0027 40.3806,19.0027 Z M 44.3395,43.5477C 44.3395,48.3579 38.6677,52.2573 31.6711,52.2573L 30.7082,52.2325C 28.1329,54.6161 24.5589,57.008 20.5862,57.008C 21.5113,55.1577 23.5174,53.3075 24.7099,50.8257C 21.2717,49.2683 19.0026,46.5902 19.0026,43.5477C 19.0026,40.5065 21.27,37.8293 24.706,36.2715C 27.6472,39.1709 32.8586,41.0982 38.7973,41.0982L 40.3249,41.0553C 41.4454,41.9312 42.8409,42.646 44.3327,43.2594L 44.3395,43.5477 Z</Geometry>
  <Geometry x:Key="GeometryInfoMessage">F1 M 38,19C 48.4934,19 57,27.5066 57,38C 57,48.4934 48.4934,57 38,57C 27.5066,57 19,48.4934 19,38C 19,27.5066 27.5066,19 38,19 Z M 33.25,33.25L 33.25,36.4167L 36.4166,36.4167L 36.4166,47.5L 33.25,47.5L 33.25,50.6667L 44.3333,50.6667L 44.3333,47.5L 41.1666,47.5L 41.1666,36.4167L 41.1666,33.25L 33.25,33.25 Z M 38.7917,25.3333C 37.48,25.3333 36.4167,26.3967 36.4167,27.7083C 36.4167,29.02 37.48,30.0833 38.7917,30.0833C 40.1033,30.0833 41.1667,29.02 41.1667,27.7083C 41.1667,26.3967 40.1033,25.3333 38.7917,25.3333 Z</Geometry>
  <Geometry x:Key="GeometryWarningMessage">F1 M 58.5832,55.4172L 17.4169,55.4171C 15.5619,53.5621 15.5619,50.5546 17.4168,48.6996L 35.201,15.8402C 37.056,13.9852 40.0635,13.9852 41.9185,15.8402L 58.5832,48.6997C 60.4382,50.5546 60.4382,53.5622 58.5832,55.4172 Z M 34.0417,25.7292L 36.0208,41.9584L 39.9791,41.9583L 41.9583,25.7292L 34.0417,25.7292 Z M 38,44.3333C 36.2511,44.3333 34.8333,45.7511 34.8333,47.5C 34.8333,49.2489 36.2511,50.6667 38,50.6667C 39.7489,50.6667 41.1666,49.2489 41.1666,47.5C 41.1666,45.7511 39.7489,44.3333 38,44.3333 Z</Geometry>
  <Geometry x:Key="GeometryErrorMessage">F1 M 38,19C 48.4934,19 57,27.5066 57,38C 57,48.4934 48.4934,57 38,57C 27.5066,57 19,48.4934 19,38C 19,27.5066 27.5066,19 38,19 Z M 23.75,34.8334L 23.75,41.1667L 52.25,41.1667L 52.25,34.8334L 23.75,34.8334 Z</Geometry>
  <Geometry x:Key="GeometryFatalMessage">F1 M 31.6667,19L 44.3333,19L 57,31.6667L 57,44.3333L 44.3333,57L 31.6667,57L 19,44.3333L 19,31.6667L 31.6667,19 Z M 30.875,33.25L 30.875,34.8334L 33.25,34.8334L 33.25,42.75L 34.8333,42.75L 34.8333,34.8334L 37.2083,34.8334L 37.2083,33.25L 30.875,33.25 Z M 37.9999,36.4168L 37.9999,39.5834C 38,40.6389 38,41.6945 38.5278,42.2222C 39.0555,42.75 40.1111,42.75 41.1666,42.75C 42.2221,42.75 43.2777,42.75 43.8055,42.2223C 44.3333,41.6945 44.3333,40.6389 44.3333,39.5834L 44.3333,36.4167C 44.3333,35.3612 44.3333,34.3056 43.8055,33.7778C 43.2777,33.25 42.2222,33.25 41.1666,33.25C 40.1111,33.25 39.0555,33.25 38.5277,33.7778C 38,34.3056 37.9999,35.3612 37.9999,36.4168 Z M 39.8472,40.375C 39.5833,39.0556 39.5833,36.9445 40.1111,35.8889C 40.6389,34.8334 41.6944,34.8334 42.2222,35.8889C 42.75,36.9445 42.75,39.0556 42.2222,40.1111C 41.6944,41.1667 40.6389,41.1667 39.8472,40.375 Z M 45.9167,33.25L 45.9167,42.75L 47.5,42.75L 47.5,39.5833L 49.875,39.5834C 50.4027,39.5834 50.9305,39.5834 51.3923,39.0556C 51.8541,38.5278 52.25,37.4723 52.6458,36.4167C 52.25,35.3611 51.8541,34.3056 51.3923,33.7778C 50.9305,33.25 50.4027,33.2501 49.8749,33.2501L 45.9167,33.25 Z M 49.6111,34.5695C 51.0625,35.8889 51.0625,36.9445 50.4687,37.4722C 49.875,38 48.6875,38 47.5,38L 47.5,34.8334C 48.6875,34.8334 49.875,34.8334 49.6111,34.5695 Z M 28.5,33.25L 25.3333,33.25C 24.8056,33.25 24.2778,33.25 24.0139,33.382C 23.75,33.5139 23.75,33.7778 23.75,34.0417L 23.75,36.4167C 23.75,36.9445 23.75,37.4722 24.0139,37.7361C 24.2778,38 24.8056,38 25.3333,38C 26.3889,38 27.4444,38 27.9722,38.5278C 28.5,39.0556 28.5,40.1111 27.9722,40.6389C 27.4444,41.1667 26.3889,41.1667 25.8611,40.9688C 25.3333,40.7708 25.3333,40.375 25.3333,39.9792L 23.75,39.9792L 23.75,41.1667C 23.75,41.6945 23.75,42.2222 24.2778,42.4861C 24.8056,42.75 25.8611,42.75 26.9167,42.75C 27.9722,42.75 29.0278,42.75 29.5556,42.4861C 30.0833,42.2222 30.0833,41.6945 30.0833,41.1667L 30.0833,38C 30.0833,37.4722 30.0833,36.9445 29.8194,36.6806C 29.5555,36.4167 29.0278,36.4167 28.5,36.4167C 27.4444,36.4167 26.3889,36.4167 25.8611,36.1528C 25.3333,35.8889 25.3333,35.3611 25.8611,35.0972C 26.3889,34.8333 27.4444,34.8333 27.9722,34.9653C 28.5,35.0972 28.5,35.3611 28.5,35.625L 30.0833,35.625L 30.0833,34.8333C 30.0833,34.3056 30.0833,33.7778 29.8194,33.5139C 29.5556,33.25 29.0278,33.25 28.5,33.25 Z</Geometry>

  <Geometry x:Key="GeometryPrevious">F1 M 33.6458,38L 49.4792,53.8333L 38.7917,53.8333L 22.1667,38L 38.7917,22.1667L 49.4792,22.1667L 33.6458,38 Z</Geometry>
  <Geometry x:Key="GeometryNext">F1 M 42.3542,38L 26.5208,53.8333L 37.2083,53.8333L 53.8333,38L 37.2083,22.1667L 26.5208,22.1667L 42.3542,38 Z</Geometry>

  <Geometry x:Key="GeometryMatchCase">F1 M 52.1,44.745L 52.1,40.93C 51.1767,41.0267 50.4292,41.1108 49.8575,41.1825C 49.2858,41.2542 48.7233,41.3933 48.17,41.6C 47.6933,41.7733 47.3225,42.0367 47.0575,42.39C 46.7925,42.7433 46.66,43.2133 46.66,43.8C 46.66,44.66 46.8808,45.25 47.3225,45.57C 47.7642,45.89 48.4167,46.05 49.28,46.05C 49.7567,46.05 50.2442,45.9358 50.7425,45.7075C 51.2408,45.4792 51.6933,45.1583 52.1,44.745 Z M 52.1,47.39C 51.73,47.7033 51.3975,47.985 51.1025,48.235C 50.8075,48.485 50.4133,48.735 49.92,48.985C 49.4333,49.2483 48.9608,49.465 48.5025,49.635C 48.0442,49.805 47.4017,49.89 46.575,49.89C 45.0383,49.89 43.7617,49.3625 42.745,48.3075C 41.7283,47.2525 41.22,45.9217 41.22,44.315C 41.22,42.995 41.4783,41.9292 41.995,41.1175C 42.5117,40.3058 43.2533,39.6617 44.22,39.185C 45.2,38.7017 46.3717,38.365 47.735,38.175C 49.0983,37.985 50.5633,37.8367 52.13,37.73L 52.13,37.63C 52.13,36.58 51.7817,35.8542 51.085,35.4525C 50.3883,35.0508 49.345,34.85 47.955,34.85C 47.325,34.85 46.5883,34.97 45.745,35.21C 44.9017,35.45 44.0783,35.7567 43.275,36.13L 42.82,36.13L 42.82,31.885C 43.3533,31.7283 44.215,31.5433 45.405,31.33C 46.595,31.1167 47.795,31.01 49.005,31.01C 51.9783,31.01 54.1442,31.5183 55.5025,32.535C 56.8608,33.5517 57.54,35.1017 57.54,37.185L 57.54,49.25L 52.1,49.25L 52.1,47.39 Z M 18.5,49.25L 26.24,25.89L 32.52,25.89L 40.26,49.25L 34.195,49.25L 32.75,44.45L 25.68,44.45L 24.235,49.25L 18.5,49.25 Z M 31.52,40.29L 29.215,32.68L 26.91,40.29L 31.52,40.29 Z</Geometry>
  <Geometry x:Key="GeometryMatchWord">F1 M 0,24.5033L 3.16667,24.5033L 3.16667,29.2533L 34.8333,29.2533L 34.8333,24.5033L 38,24.5033L 38,32.42L 0,32.42L 0,24.5033 Z M 36.9867,19.2533L 32.68,19.2533L 32.68,17.8046C 32.3976,18.0368 32.075,18.2849 31.7122,18.5487C 31.3493,18.8126 31.0307,19.0105 30.7563,19.1425C 30.4079,19.3351 30.0629,19.4862 29.7211,19.5957C 29.3794,19.7052 28.9724,19.76 28.5,19.76C 26.9008,19.76 25.6355,19.0917 24.704,17.7551C 23.7724,16.4185 23.3067,14.6313 23.3067,12.3935C 23.3067,11.1585 23.465,10.0865 23.7817,9.17739C 24.0983,8.2683 24.5351,7.47729 25.0919,6.80437C 25.5985,6.19215 26.2141,5.70725 26.9384,5.34968C 27.6628,4.99211 28.4288,4.81333 29.2363,4.81333C 29.9672,4.81333 30.5682,4.8892 31.0393,5.04094C 31.5103,5.19267 32.0572,5.42951 32.68,5.75146L 32.68,-1.90735e-006L 36.9867,-1.90735e-006L 36.9867,19.2533 Z M 32.68,15.6037L 32.68,8.49458C 32.4689,8.38111 32.1918,8.28809 31.8488,8.21552C 31.5057,8.14295 31.2115,8.10666 30.966,8.10666C 29.9369,8.10666 29.163,8.48534 28.6445,9.2427C 28.1259,10.0001 27.8667,11.0583 27.8667,12.4173C 27.8667,13.8449 28.0732,14.8767 28.4861,15.5127C 28.8991,16.1487 29.5661,16.4667 30.4871,16.4667C 30.8618,16.4667 31.2411,16.3895 31.6251,16.2351C 32.0091,16.0807 32.3607,15.8703 32.68,15.6037 Z M 22.2933,5.32001L 18.2598,19.2533L 13.684,19.2533L 11.2615,10.2442L 8.82708,19.2533L 4.25125,19.2533L 0.253328,5.32001L 4.73416,5.32001L 6.89541,14.539L 9.51583,5.32001L 13.3158,5.32001L 15.7858,14.539L 17.8085,5.32001L 22.2933,5.32001 Z</Geometry>

  <Geometry x:Key="GeometryDelete">F1 M 25.3333,23.75L 50.6667,23.75C 51.5411,23.75 51.8541,27.3125 51.8541,27.3125L 24.1458,27.3125C 24.1458,27.3125 24.4589,23.75 25.3333,23.75 Z M 35.625,19.7917L 40.375,19.7917C 40.8122,19.7917 41.9583,20.9378 41.9583,21.375C 41.9583,21.8122 40.8122,22.9584 40.375,22.9584L 35.625,22.9584C 35.1878,22.9584 34.0416,21.8122 34.0416,21.375C 34.0416,20.9378 35.1878,19.7917 35.625,19.7917 Z M 27.7083,28.5L 48.2916,28.5C 49.1661,28.5 49.875,29.2089 49.875,30.0834L 48.2916,53.8334C 48.2916,54.7078 47.5828,55.4167 46.7083,55.4167L 29.2917,55.4167C 28.4172,55.4167 27.7083,54.7078 27.7083,53.8334L 26.125,30.0834C 26.125,29.2089 26.8339,28.5 27.7083,28.5 Z M 30.0833,31.6667L 30.4792,52.25L 33.25,52.25L 32.8542,31.6667L 30.0833,31.6667 Z M 36.4167,31.6667L 36.4167,52.25L 39.5833,52.25L 39.5833,31.6667L 36.4167,31.6667 Z M 43.1458,31.6667L 42.75,52.25L 45.5208,52.25L 45.9167,31.6667L 43.1458,31.6667 Z</Geometry>

  <ImageBrush x:Key="ImageCloseWindow" Source="/Resources/Images/close_window.png" />
  <ImageBrush x:Key="ImageMaximizeWindow" Source="/Resources/Images/maximize_window.png" />
  <ImageBrush x:Key="ImageMinimizeWindow" Source="/Resources/Images/minimize_window.png" />
  <ImageBrush x:Key="ImageRestoreWindow" Source="/Resources/Images/restore_window.png" />

  <ImageBrush x:Key="ImageErrorDialog" Source="/Resources/Images/error-32.png" />
  <ImageBrush x:Key="ImageInformationDialog" Source="/Resources/Images/info-32.png" />
  <ImageBrush x:Key="ImageQuestionDialog" Source="/Resources/Images/question-32.png" />
  <ImageBrush x:Key="ImageWarningDialog" Source="/Resources/Images/warning-32.png" />

  <ImageBrush x:Key="ImageAdvancedEditionVector" Source="/Resources/Images/gear-pencil.png" />
  <ImageBrush x:Key="ImagePickDateTime" Source="/Resources/Images/calendar--pencil.png" />
  <ImageBrush x:Key="ImageReset" Source="/Resources/Images/eraser.png" />
  <ImageBrush x:Key="ImageLocked" Source="/Resources/Images/lock.png" />
  <ImageBrush x:Key="ImageUnlocked" Source="/Resources/Images/lock-unlock.png" />
  <ImageBrush x:Key="ImageLength" Source="/Resources/Images/ruler-triangle.png" />

  <!--  WINDOWS  -->
  <ControlTemplate x:Key="MainWindowButtonTemplate" TargetType="{x:Type Button}">
    <Grid>
      <Border x:Name="Background" Background="{TemplateBinding Background}"/>
      <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    </Grid>
    <!-- <ControlTemplate.Triggers>
      --><!-- Active --><!--
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsActive}" Value="True">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{StaticResource MainWindowButtonActiveBorderBrush}"/>
      </DataTrigger>
      --><!-- Inactive --><!--
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsActive}" Value="False">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{StaticResource MainWindowButtonInactiveBorderBrush}"/>
      </DataTrigger>
      --><!-- Hover Active --><!--
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsActive}" Value="True"/>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource MainWindowButtonHoverActiveBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource MainWindowButtonHoverActiveBorderBrush}"/>
      </MultiDataTrigger>
      --><!-- Hover Inactive --><!--
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsActive}" Value="False"/>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource MainWindowButtonHoverActiveBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource MainWindowButtonHoverActiveBorderBrush}"/>
      </MultiDataTrigger>
      --><!-- Down --><!--
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{StaticResource MainWindowButtonDownBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource MainWindowButtonDownBorderBrush}"/>
      </Trigger>
      --><!-- Disabled --><!--
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:disabled">

        <Setter Property="Opacity" Value="0.25"/>
      	</Style>
--></ControlTemplate>
  <ControlTheme x:Key="MainWindowButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="{StaticResource MainWindowButtonActiveBorderBrush}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource TemplatedParent}}"/>
    <Setter Property="Height" Value="32"/>
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="Template" Value="{StaticResource MainWindowButtonTemplate}"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Width" Value="46"/>
    
  </ControlTheme>

  <ControlTheme TargetType="{x:Type Window}" x:Key="WindowChromeStyle">
    <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
    
    
    
    <Setter Property="behaviors:BehaviorProperties.KeepTaskbarWhenMaximized" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Window">
          <Border x:Name="ContentBorder" Background="{TemplateBinding Background}" BorderBrush="{StaticResource MainWindowInactiveBorderBrush}" BorderThickness="1" IsHitTestVisible="True">
            <DockPanel>
              <DockPanel x:Name="TitleBar" DockPanel.Dock="Top" VerticalAlignment="Top"  Height="32">
                <Button Theme="{StaticResource MainWindowButtonStyle}" DockPanel.Dock="Right" Content="{me:Image {StaticResource VectorCloseWindow}, 12, 12}" x:Name="CloseButton" Command="{x:Static cmd:SystemCommands.CloseWindowCommand}"/>
                <Button Theme="{StaticResource MainWindowButtonStyle}" DockPanel.Dock="Right" Content="{me:Image {StaticResource VectorMaximizeWindow}, 12, 12}" x:Name="MaximizeButton" Command="{x:Static cmd:SystemCommands.MaximizeWindowCommand}"/>
                <Button Theme="{StaticResource MainWindowButtonStyle}" DockPanel.Dock="Right" Content="{me:Image {StaticResource VectorRestoreWindow}, 12, 12}" x:Name="RestoreButton" Command="{x:Static cmd:SystemCommands.RestoreWindowCommand}" IsVisible="false"/>
                <Button Theme="{StaticResource MainWindowButtonStyle}" DockPanel.Dock="Right" Content="{me:Image {StaticResource VectorMinimizeWindow}, 12, 12}" x:Name="MinimizeButton" Command="{x:Static cmd:SystemCommands.MinimizeWindowCommand}"/>
                <Button Theme="{StaticResource MainWindowButtonStyle}" DockPanel.Dock="Left" Command="{x:Static cmd:SystemCommands.ShowSystemMenuCommand}" Background="Transparent" Width="44">
                  <Image Source="{DynamicResource VectorEditorIcon}" Height="20"/>
                  
                    
                  
                </Button>
                <TextBlock x:Name="Caption" Foreground="{StaticResource MainWindowInactiveCaptionTextBrush}" Text="{TemplateBinding Title}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
              </DockPanel>
              <Panel Background="Transparent" Margin="{TemplateBinding WindowDecorationMargin}" />
              <VisualLayerManager>
                <VisualLayerManager.ChromeOverlayLayer>
                  <TitleBar />
                </VisualLayerManager.ChromeOverlayLayer>
                <ContentPresenter Name="PART_ContentPresenter"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                  Content="{TemplateBinding Content}"
                                  Margin="{TemplateBinding Padding}"
                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
              </VisualLayerManager>
<!--               <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"> -->
<!--                <StackPanel>
                  <ContentPresenter Name="PART_ContentPresenter"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              Margin="{TemplateBinding Padding}"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </StackPanel>-->
<!--               </Border> -->
            </DockPanel>
          </Border>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="IsActive" Value="True">
              <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{StaticResource MainWindowActiveDefaultBorderBrush}"/>
              <Setter TargetName="Caption" Property="Foreground" Value="{StaticResource MainWindowActiveCaptionTextBrush}"/>
            </Trigger>
            <Trigger Property="ResizeMode" Value="NoResize">
              <Setter TargetName="MaximizeButton" Property="IsVisible" Value="false"/>
              <Setter TargetName="MinimizeButton" Property="IsVisible" Value="false"/>
              <Setter TargetName="RestoreButton" Property="IsVisible" Value="false"/>
            </Trigger>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="ContentBorder" Property="BorderThickness" Value="0"/>
              <Setter TargetName="MaximizeButton" Property="IsVisible" Value="false"/>
              <Setter TargetName="RestoreButton" Property="Visibility" Value="Visible"/>
              
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>
  <ControlTheme TargetType="{x:Type wnd:MessageDialogBase}" x:Key="MessageDialogChromeStyle" BasedOn="{StaticResource WindowChromeStyle}">
    <Setter Property="Icon" Value="{DynamicResource EditorIcon}" />
    <!-- Show the dialog window in the task bar if at least one of the following is true:
      - the dialog window does not have a parent window (Owner is null, thus the first binding returns its FallbackValue)
      - the parent window is not loaded
      - the parent window is not visible
      - the parent window is minimized
    -->
    <Setter Property="ShowInTaskbar" Value="{me:MultiBinding {Binding Owner.IsLoaded, Converter={cvt:InvertBool}, FallbackValue={me:True}, RelativeSource={RelativeSource Self}},
                                                             {Binding Owner.IsVisible, Converter={cvt:InvertBool}, RelativeSource={RelativeSource Self}},
                                                             {Binding Owner.WindowState, Converter={cvt:IsEqualToParam}, ConverterParameter={x:Static WindowState.Minimized}, RelativeSource={RelativeSource Self}},
                                                             Converter={cvt:OrMultiConverter}, FallbackValue={me:True}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="MinHeight" Value="120" />
    <Setter Property="MinWidth" Value="320" />
    <Setter Property="MaxHeight" Value="768" />
    <Setter Property="SizeToContent" Value="WidthAndHeight" />
    
    <Setter Property="Padding" Value="10,0" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <DockPanel LastChildFill="True" Margin="10">
            <!--  BUTTONS  -->
            <ItemsControl x:Name="ButtonItemsControl" Margin="10,10,10,0" HorizontalAlignment="Right" DockPanel.Dock="Bottom"
                            ItemsSource="{Binding ButtonsSource, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <UniformGrid  Rows="1" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type diag:DialogButtonInfo}">
                  <Button
                            Margin="5,0" Padding="20,6" MinWidth="80"
                            Command="{Binding ButtonCommand, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                            CommandParameter="{Binding Result}"
                            Content="{Binding Content}" IsCancel="{Binding IsCancel}" IsDefault="{Binding IsDefault}" />
	<Design.DataContext>
		<diag:DialogButtonInfo />
	</Design.DataContext>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
            <!--  CONTENT  -->
            <ContentPresenter Content="{Binding}"
                              ContentTemplate="{Binding MessageTemplate, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                              
                              Cursor="{Binding Cursor, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                              Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                              MinWidth="{Binding ActualWidth, ElementName=ButtonItemsControl}"
                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"/>
	<!-- <ContentPresenter Content="{Binding}"
                              ContentTemplate="{Binding MessageTemplate, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                              ContentTemplateSelector="{Binding MessageTemplateSelector, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                              Cursor="{Binding Cursor, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                              Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                              MinWidth="{Binding ActualWidth, ElementName=ButtonItemsControl}"
                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"
                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type wnd:MessageDialogBase}}}"/> -->
          </DockPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>
  
  
  
  
  
  
  
  
  <ControlTheme x:Key="{x:Type wnd:MessageBox}" TargetType="{x:Type wnd:MessageBox}" BasedOn="{StaticResource MessageDialogChromeStyle}" >
    <Setter Property="MessageTemplate">
      <Setter.Value>
        <DataTemplate>
          <DockPanel LastChildFill="True"
                     MinWidth="{Binding MinWidth, RelativeSource={RelativeSource AncestorType=ContentPresenter}, FallbackValue=320}"
                     MaxHeight="{Binding MaxHeight, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Converter={cvt:SumNum}, ConverterParameter={me:Double -20}, FallbackValue=748}">
            <i:Interaction.Behaviors>
              <behaviors:ResizeBehavior SizeRatio="5,3"/>
            </i:Interaction.Behaviors>
            <Image DockPanel.Dock="Left" Source="{Binding Image, RelativeSource={RelativeSource AncestorType=wnd:MessageBox}}"
                   HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5" RenderOptions.BitmapInterpolationMode="HighQuality"
                   Height="{Binding RelativeSource={RelativeSource Self}, Path=Size.Height}" Width="{Binding RelativeSource={RelativeSource Self}, Path=Size.Width}"
                   IsVisible="{Binding Image, RelativeSource={RelativeSource AncestorType=wnd:MessageBox}, Converter={cvt:ObjectToBool}}" />
            <ctrl:MarkdownTextBlock Text="{Binding}" VerticalAlignment="Center"/>
          </DockPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type wnd:CheckedMessageBox}" TargetType="{x:Type wnd:CheckedMessageBox}" BasedOn="{StaticResource {x:Type wnd:MessageBox}}" >
    <Setter Property="MessageTemplate">
      <Setter.Value>
        <DataTemplate>
          <DockPanel LastChildFill="True"
                     MinWidth="{Binding MinWidth, RelativeSource={RelativeSource AncestorType=ContentPresenter}, FallbackValue=320}"
                     MaxHeight="{Binding MaxHeight, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Converter={cvt:SumNum}, ConverterParameter={me:Double -20}, FallbackValue=748}" >
            <i:Interaction.Behaviors>
              <behaviors:ResizeBehavior SizeRatio="5,3"/>
            </i:Interaction.Behaviors>
            <CheckBox DockPanel.Dock="Bottom" Margin="0,15,0,5"
                      HorizontalAlignment="Left" VerticalAlignment="Bottom"
                      Content="{Binding CheckedMessage, RelativeSource={RelativeSource AncestorType=wnd:CheckedMessageBox}}"
                      IsChecked="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=wnd:CheckedMessageBox}}"/>
            <Image DockPanel.Dock="Left" Source="{Binding Image, RelativeSource={RelativeSource AncestorType=wnd:CheckedMessageBox}}"
                   HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,5" RenderOptions.BitmapInterpolationMode="HighQuality"
                   Height="{Binding RelativeSource={RelativeSource Self}, Path=Source.PixelHeight}" Width="{Binding RelativeSource={RelativeSource Self}, Path=Source.PixelWidth}"
                   IsVisible="{Binding Image, RelativeSource={RelativeSource AncestorType=wnd:CheckedMessageBox}, Converter={cvt:ObjectToBool}}" />
            <ctrl:MarkdownTextBlock Text="{Binding}" VerticalAlignment="Center"/>
          </DockPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:MarkdownTextBlock}" TargetType="{x:Type ctrl:MarkdownTextBlock}" >
    <Setter Property="HyperlinkCommand" Value="{x:Static cmd:UtilityCommands.OpenHyperlinkCommand}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MarkdownTextBlock}">
          <ScrollViewer x:Name="PART_MessageContainer"
                                    HorizontalScrollBarVisibility="Hidden"
                                    VerticalScrollBarVisibility="Auto"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock" >
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
    <!-- <ControlTheme.Triggers>
      
    </ControlTheme.Triggers> -->
  	<Style Selector="^:disabled">

        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
      	</Style>
</ControlTheme>

  

  <ControlTheme x:Key="NuclearScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="{TemplateBinding Background}" Focusable="False">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"  Focusable="False"/>
            <ScrollBar IsVisible="{TemplateBinding HorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding Viewport}" Minimum="0" Maximum="{TemplateBinding Extent}" AutomationProperties.AutomationId="HorizontalScrollBar" Focusable="False"/>
            <ScrollBar IsVisible="{TemplateBinding VerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding Viewport}" Minimum="0" Maximum="{TemplateBinding Extent}" AutomationProperties.AutomationId="VerticalScrollBar" Focusable="False"/>
            <Rectangle Grid.Column="1" Grid.Row="1" Fill="{DynamicResource BackgroundBrush}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource NuclearScrollViewer}" ></ControlTheme>

  <!--  COMBO BOXES  -->
  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid x:Name="grid">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="16" />
      </Grid.ColumnDefinitions>
      <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Fill="{DynamicResource DropdownButtonBackgroundBrush}" Stroke="{DynamicResource NormalBorderBrush}" Height="20" />
      <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource ComboBoxBackground}" Stroke="{DynamicResource NormalBorderBrush}" />
      <Border Margin="1" Grid.Column="1" CornerRadius="2" Background="{DynamicResource ComboToggleButtonBackground}" x:Name="border" />
      <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Data="M0.5,0.5 L3,6.5 5.5,0.5" Stroke="{DynamicResource TextBrush}" Margin="0" Height="5.5" StrokeThickness="2" Stretch="Fill" Width="9.8" />
    </Grid>
    <!-- <ControlTemplate.Triggers>
      
      
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:disabled">

        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        		<Style Selector="^ /template/ Path#Arrow">
			<Setter Property="Stroke" Value="{DynamicResource DisabledForegroundBrush}"/>
		</Style>

        		<Style Selector="^ /template/ Border#border">
			<Setter Property="Background" Value="{DynamicResource DisabledBorderBrush}"/>
		</Style>

        		<Style Selector="^ /template/ Grid#grid">
			<Setter Property="Opacity" Value="0.8"/>
		</Style>

      	</Style>
	<Style Selector="^:checked">

        		<Style Selector="^ /template/ Border#border">
			<Setter Property="Background" Value="{DynamicResource ComboToggleButtonHoverBackground}"/>
		</Style>

      	</Style>
	<Style Selector="^:pointerover">

        		<Style Selector="^ /template/ Border#border">
			<Setter Property="Background" Value="{DynamicResource ComboToggleButtonHoverBackground}"/>
		</Style>

      	</Style>
--></ControlTemplate>

  <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
    <Grid x:Name="grid" ColumnDefinitions="*,Auto,Auto">
      <ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" HorizontalAlignment="Right" />
      <ContentPresenter IsVisible="{Binding $parent[ComboBox].SelectedItem, Converter={x:Static ObjectConverters.IsNotNull}}" HorizontalAlignment="Left" Margin="3,2,23,2" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"  IsHitTestVisible="False" />
      <TextBox IsVisible="{Binding $parent[ComboBox].SelectedItem, Converter={x:Static ObjectConverters.IsNull}}" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,2,23,2" x:Name="PART_EditableTextBox" Theme="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="{TemplateBinding Background}"  BorderBrush="{DynamicResource NormalBorderBrush}" Foreground="{DynamicResource TextBrush}" Text="{Binding NodeValue, Converter={sd:EnumToDisplayName}}" />
      <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="PART_Popup" Focusable="False" IsLightDismissEnabled="True" >
        <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" Width="{TemplateBinding Width}" x:Name="DropDown" >
          <Border x:Name="DropDownBorder" Background="{DynamicResource ControlBackgroundBrush}" CornerRadius="3"/>
          <ScrollViewer Margin="1" Theme="{DynamicResource NuclearScrollViewer}"  HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"  Foreground="{StaticResource ActiveCaptionTextBrushKey}">
            <ItemsPresenter Name="PART_ItemsPresenter" Margin="{DynamicResource ComboBoxDropdownContentMargin}" ItemsPanel="{TemplateBinding ItemsPanel}" />
          </ScrollViewer>
        </Grid>
      </Popup>
    </Grid>
    <!-- <ControlTemplate.Triggers>
      <Trigger Property="HasItems" Value="false">
        <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder" />
      </Trigger>
      
      <Trigger Property="IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
      </Trigger>
      <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
        <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder" />
      </Trigger>
      <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="IsVisible" TargetName="PART_EditableTextBox" Value="true" />
        <Setter Property="IsVisible" Value="false" TargetName="ContentSite" />
      </Trigger>
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:disabled">

        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        		<Style Selector="^ /template/ Grid#grid">
			<Setter Property="Opacity" Value="0.5"/>
		</Style>

      	</Style>
--></ControlTemplate>

  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
    <Panel>
    <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    <TextPresenter Name="PART_TextPresenter"
               CaretBlinkInterval="{TemplateBinding CaretBlinkInterval}"
               CaretBrush="{TemplateBinding CaretBrush}"
               CaretIndex="{TemplateBinding CaretIndex}"
               LineHeight="{TemplateBinding LineHeight}"
               LetterSpacing="{TemplateBinding LetterSpacing}"
               PasswordChar="{TemplateBinding PasswordChar}"
               RevealPassword="{TemplateBinding RevealPassword}"
               SelectionBrush="{TemplateBinding SelectionBrush}"
               SelectionEnd="{TemplateBinding SelectionEnd}"
               SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
               SelectionStart="{TemplateBinding SelectionStart}"
               Text="{TemplateBinding Text,Mode=TwoWay}"
               TextAlignment="{TemplateBinding TextAlignment}"
               TextWrapping="{TemplateBinding TextWrapping}" />
  </Panel>
  </ControlTemplate>

  <ControlTheme x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    
    <Setter Property="Background" Value="{DynamicResource ComboBoxBackground}"/>
    <Setter Property="Template" Value="{DynamicResource ComboBoxTemplate}" />
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Grid  Margin="0">
            <Rectangle x:Name="Background" IsHitTestVisible="True" Fill="Transparent"/>
            <Rectangle x:Name="HoverRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource NormalBrush}"/>
            <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource ComboBoxItemHoverBackground}"/>
            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                          Content="{TemplateBinding Content}" Margin="5,1" x:Name="contentPresenter" VerticalAlignment="Center" />
          </Grid>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
              <Setter TargetName="SelectedRectangle" Property="Opacity" Value="1"/>
            </Trigger>
            
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
            	</Style>
	<Style Selector="^:pointerover">

              		<Style Selector="^ /template/ Rectangle#HoverRectangle">
			<Setter Property="Opacity" Value="1"/>
		</Style>

            	</Style>
</ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:ColorPicker}" TargetType="{x:Type ctrl:ColorPicker}" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="InputColumnWidth" Value="120"/>
    <Setter Property="PickupAreaSize" Value="160, 160"/>
    <Setter Property="StripsHeight" Value="22"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ColorPicker}">
          <Grid x:Name="RootLayout" VerticalAlignment="Top" TextElement.Foreground="{DynamicResource TextBrush}" Focusable="False">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
<!--               <ColumnDefinition Width="{TemplateBinding InputColumnWidth}"/> -->
            </Grid.ColumnDefinitions>
            <Grid x:Name="LeftPaneLayout" Margin="2" VerticalAlignment="Top" Focusable="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Canvas x:Name="PART_HuePickerRenderSurface" Width="{Binding PickupAreaSize.Width, RelativeSource={RelativeSource TemplatedParent}}"
                                    Height="{TemplateBinding StripsHeight}">
                <Canvas.Background>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="{Binding PickupAreaSize.Width, RelativeSource={RelativeSource TemplatedParent}},{TemplateBinding StripsHeight}">
                    <GradientStop Color="Red" Offset="0.0"/>
                    <GradientStop Color="Yellow" Offset="0.166666666667"/>
                    <GradientStop Color="Lime" Offset="0.333333333333"/>
                    <GradientStop Color="Cyan" Offset="0.5"/>
                    <GradientStop Color="Blue" Offset="0.666666666667"/>
                    <GradientStop Color="Fuchsia" Offset="0.88888888883"/>
                    <GradientStop Color="Red" Offset="1.0"/>
                  </LinearGradientBrush>
                </Canvas.Background>
                <Rectangle x:Name="PART_HuePickerSelector" Height="{TemplateBinding StripsHeight}" Width="2">
                  <Rectangle.Fill>
                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                      <GradientStop Color="Black" Offset="0"/>
                      <GradientStop Color="White" Offset="1"/>
                    </LinearGradientBrush>
                  </Rectangle.Fill>
                </Rectangle>
              </Canvas>
              <Canvas Width="{Binding PickupAreaSize.Width, RelativeSource={RelativeSource TemplatedParent}}"
                                    Height="{Binding PickupAreaSize.Height, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="1" Margin="2" Focusable="False">
                <Rectangle x:Name="PART_ColorPickerRenderSurface" Fill="White" StrokeThickness="0" VerticalAlignment="Top" HorizontalAlignment="Left"
                                           Width="{Binding PickupAreaSize.Width, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False"
                                           Height="{Binding PickupAreaSize.Height, RelativeSource={RelativeSource TemplatedParent}}" Margin="0"/>
                <Canvas x:Name="PART_ColorPickerSelector" Width="0" Height="0" Focusable="False">
                  <Ellipse Width="10" Height="10" Canvas.Left="-5" Canvas.Top="-5" StrokeThickness="2" Focusable="False">
                    <Ellipse.Stroke>
                      <LinearGradientBrush EndPoint="0,0" StartPoint="1,1">
                        <GradientStop Color="Black" Offset="0"/>
                        <GradientStop Color="White" Offset="1"/>
                      </LinearGradientBrush>
                    </Ellipse.Stroke>
                  </Ellipse>
                </Canvas>
              </Canvas>
              <Grid Height="{TemplateBinding StripsHeight}" Margin="2" Grid.Row="2" Focusable="False">
                <Rectangle Focusable="False">
                  <Rectangle.Fill>
                    <DrawingBrush TileMode="Tile" >
                      <DrawingBrush.Drawing>
                        <DrawingGroup>
                          <GeometryDrawing Brush="White">
                            <GeometryDrawing.Geometry>
                              <RectangleGeometry Rect="0,0,2,2"/>
                            </GeometryDrawing.Geometry>
                          </GeometryDrawing>
                          <GeometryDrawing Brush="Black">
                            <GeometryDrawing.Geometry>
                              <GeometryGroup>
                                <RectangleGeometry Rect="0,0,1,1"/>
                                <RectangleGeometry Rect="1,1,1,1"/>
                              </GeometryGroup>
                            </GeometryDrawing.Geometry>
                          </GeometryDrawing>
                        </DrawingGroup>
                      </DrawingBrush.Drawing>
                    </DrawingBrush>
                  </Rectangle.Fill>
                </Rectangle>
                <Rectangle x:Name="PART_ColorPreviewRenderSurface" Focusable="False"/>
              </Grid>
            </Grid>
            <Grid x:Name="RightPaneGrid" Grid.Column="1" Margin="2" Focusable="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="0.5*"/>
                <RowDefinition Height="0.5*"/>
              </Grid.RowDefinitions>
              <HeaderedContentControl Header="RGBA" VerticalAlignment="Top" Grid.Column="0" HorizontalContentAlignment="Stretch" BorderThickness="0" Margin="2" Focusable="False">
                <ctrl:KeyValueGrid x:Name="RGBGrid" HorizontalAlignment="Stretch" Focusable="False">
                  <TextBlock Margin="4,0" Text="{sd:Localize R:, Context=RGBA}" ToolTip.Tip="{sd:Localize Red, Context=ToolTip}" VerticalAlignment="Center" HorizontalAlignment="Left" Focusable="False"/>
                  <StackPanel Margin="0,2">
                    <ctrl:NumericTextBox x:Name="RedTextBox" Value="{Binding Red, RelativeSource={RelativeSource Mode=TemplatedParent}}" SelectionBrush="{StaticResource RedBrush}" Minimum="0" Maximum="255" Margin="0" MouseValidationTrigger="OnMouseMove"/>
                    <Rectangle Height="3" Fill="{StaticResource RedBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" RenderTransformOrigin="0,0">
                      <Rectangle.RenderTransform>
                        <ScaleTransform ScaleX="{Binding ValueRatio, ElementName=RedTextBox}"/>
                      </Rectangle.RenderTransform>
                    </Rectangle>
                  </StackPanel>
                  <TextBlock Margin="4,0" Text="{sd:Localize G:, Context=RGBA}" ToolTip.Tip="{sd:Localize Green, Context=ToolTip}" VerticalAlignment="Center" HorizontalAlignment="Left" Focusable="False"/>
                  <StackPanel Margin="0,2">
                    <ctrl:NumericTextBox x:Name="GreenTextBox" Value="{Binding Green, RelativeSource={RelativeSource Mode=TemplatedParent}}" SelectionBrush="{StaticResource GreenBrush}" Minimum="0" Maximum="255" Margin="0" MouseValidationTrigger="OnMouseMove"/>
                    <Rectangle Height="3" Fill="{StaticResource GreenBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" RenderTransformOrigin="0,0">
                      <Rectangle.RenderTransform>
                        <ScaleTransform ScaleX="{Binding ValueRatio, ElementName=GreenTextBox}"/>
                      </Rectangle.RenderTransform>
                    </Rectangle>
                  </StackPanel>
                  <TextBlock Margin="4,0" Text="{sd:Localize B:, Context=RGBA}" ToolTip.Tip="{sd:Localize Blue, Context=ToolTip}" VerticalAlignment="Center" HorizontalAlignment="Left" Focusable="False"/>
                  <StackPanel Margin="0,2">
                    <ctrl:NumericTextBox x:Name="BlueTextBox" Value="{Binding Blue, RelativeSource={RelativeSource Mode=TemplatedParent}}" SelectionBrush="{StaticResource BlueBrush}" Minimum="0" Maximum="255" Margin="0" MouseValidationTrigger="OnMouseMove"/>
                    <Rectangle Height="3" Fill="{StaticResource BlueBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" RenderTransformOrigin="0,0">
                      <Rectangle.RenderTransform>
                        <ScaleTransform ScaleX="{Binding ValueRatio, ElementName=BlueTextBox}"/>
                      </Rectangle.RenderTransform>
                    </Rectangle>
                  </StackPanel>
                  <TextBlock x:Name="AlphaTextBlock" Margin="4,0" Text="{sd:Localize A:, Context=RGBA}" ToolTip.Tip="{sd:Localize Alpha, Context=ToolTip}" VerticalAlignment="Center" HorizontalAlignment="Left" Focusable="False"/>
                  <StackPanel Margin="0,2" x:Name="AlphaValue">
                    <ctrl:NumericTextBox x:Name="AlphaTextBox" Value="{Binding Alpha, RelativeSource={RelativeSource Mode=TemplatedParent}}" SelectionBrush="{StaticResource AlphaBrush}" Minimum="0" Maximum="255" Margin="0"/>
                    <Rectangle Height="3" Fill="{StaticResource AlphaBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" RenderTransformOrigin="0,0">
                      <Rectangle.RenderTransform>
                        <ScaleTransform ScaleX="{Binding ValueRatio, ElementName=AlphaTextBox}"/>
                      </Rectangle.RenderTransform>
                    </Rectangle>
                  </StackPanel>
                </ctrl:KeyValueGrid>
              </HeaderedContentControl>
              <HeaderedContentControl Header="HSB" VerticalAlignment="Top" d:LayoutOverrides="Width" BorderThickness="0" Grid.Row="1" Margin="2" Focusable="False">
                <ctrl:KeyValueGrid Focusable="False">
                  <TextBlock Margin="4,0" Text="{sd:Localize H:, Context=HSB}" ToolTip.Tip="{sd:Localize Hue, Context=ToolTip}" VerticalAlignment="Center" HorizontalAlignment="Left" Focusable="False"/>
                  <StackPanel Margin="0,2">
                    <ctrl:NumericTextBox x:Name="HueTextBox" Value="{Binding Hue, RelativeSource={RelativeSource Mode=TemplatedParent}}" DecimalPlaces="0" SelectionBrush="{StaticResource AlphaBrush}" Minimum="0" Maximum="360" Margin="0" MouseValidationTrigger="OnMouseMove"/>
                    <Rectangle Height="3" Fill="{StaticResource AlphaBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" RenderTransformOrigin="0,0">
                      <Rectangle.RenderTransform>
                        <ScaleTransform ScaleX="{Binding ValueRatio, ElementName=HueTextBox}"/>
                      </Rectangle.RenderTransform>
                    </Rectangle>
                  </StackPanel>
                  <TextBlock Margin="4,0" Text="{sd:Localize S:, Context=HSB}" ToolTip.Tip="{sd:Localize Saturation, Context=ToolTip}" VerticalAlignment="Center" HorizontalAlignment="Left" Focusable="False"/>
                  <StackPanel Margin="0,2">
                    <ctrl:NumericTextBox x:Name="SaturationTextBox" Value="{Binding Saturation, RelativeSource={RelativeSource Mode=TemplatedParent}}" DecimalPlaces="0" SelectionBrush="{StaticResource AlphaBrush}" Minimum="0" Maximum="100" Margin="0" MouseValidationTrigger="OnMouseMove"/>
                    <Rectangle Height="3" Fill="{StaticResource AlphaBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" RenderTransformOrigin="0,0">
                      <Rectangle.RenderTransform>
                        <ScaleTransform ScaleX="{Binding ValueRatio, ElementName=SaturationTextBox}"/>
                      </Rectangle.RenderTransform>
                    </Rectangle>
                  </StackPanel>
                  <TextBlock Margin="4,0" Text="{sd:Localize B:, Context=HSB}" ToolTip.Tip="{sd:Localize Value, Context=ToolTip}" VerticalAlignment="Center" HorizontalAlignment="Left" Focusable="False"/>
                  <StackPanel Margin="0,2">
                    <ctrl:NumericTextBox x:Name="BrightnessTextBox" Value="{Binding Brightness, RelativeSource={RelativeSource Mode=TemplatedParent}}" DecimalPlaces="0" SelectionBrush="{StaticResource AlphaBrush}" Minimum="0" Maximum="100" Margin="0" MouseValidationTrigger="OnMouseMove"/>
                    <Rectangle Height="3" Fill="{StaticResource AlphaBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" RenderTransformOrigin="0,0">
                      <Rectangle.RenderTransform>
                        <ScaleTransform ScaleX="{Binding ValueRatio, ElementName=BrightnessTextBox}"/>
                      </Rectangle.RenderTransform>
                    </Rectangle>
                  </StackPanel>
                </ctrl:KeyValueGrid>
              </HeaderedContentControl>
            </Grid>
          </Grid>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="ShowAlpha" Value="False">
              <Setter TargetName="AlphaTextBlock" Property="IsVisible" Value="false"/>
              <Setter TargetName="AlphaValue" Property="IsVisible" Value="false"/>
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}" >
    
    
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Border x:Name="Border" BorderThickness="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                        Background="{DynamicResource WindowBackgroundBrush}"
                        BorderBrush="{DynamicResource SolidBorderBrush}"
                        CornerRadius="3">
            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="4" HorizontalAlignment="Left" VerticalAlignment="Top" />
          </Border>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="true">
              <Setter TargetName="Border" Property="CornerRadius" Value="3" />
              <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
    
    
    <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
    
    
  </ControlTheme>

  <!--  BUTTONS  -->
  <ControlTheme x:Key="VectorEditorToggleButtonStyle" TargetType="ToggleButton">
    <!--<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>-->
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Margin="0,0,1,1">
            <Rectangle Fill="{TemplateBinding Background}"/>
            <Rectangle x:Name="overlayRect" Fill="#00FFFFFF"/>
          </Grid>
          <!-- <ControlTemplate.Triggers>
            --><!--
                        
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="overlayRect" Property="Fill" Value="Fuchsia"/>
                        </Trigger>
                        --><!--
            
            
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="overlayRect" Property="Fill" Value="#60FFFFFF"/>
            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              		<Style Selector="^ /template/ Rectangle#overlayRect">
			<Setter Property="Fill" Value="#20FFFFFF"/>
		</Style>

            	</Style>
	<Style Selector="^:pointerover">

              		<Style Selector="^ /template/ Rectangle#overlayRect">
			<Setter Property="Fill" Value="#80FFFFFF"/>
		</Style>

            	</Style>
	<Style Selector="^:checked">

              		<Style Selector="^ /template/ Rectangle#overlayRect">
			<Setter Property="Fill" Value="#40FFFFFF"/>
		</Style>

            	</Style>
	<Style Selector="^:disabled">

                            		<Style Selector="^ /template/ Rectangle#overlayRect">
			<Setter Property="Fill" Value="White"/>
		</Style>

                        	</Style>
	<Style Selector="^:pointerover">

                            		<Style Selector="^ /template/ Rectangle#overlayRect">
			<Setter Property="Fill" Value="Lime"/>
		</Style>

                        	</Style>
	<Style Selector="^:checked">

                            		<Style Selector="^ /template/ Rectangle#overlayRect">
			<Setter Property="Fill" Value="Gold"/>
		</Style>

                        	</Style>
</ControlTheme>

  

  <ControlTemplate x:Key="SimpleToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
    <Grid x:Name="Grid">
      <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}"/>
      <Border x:Name="HoverBorder" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{DynamicResource ButtonHoverBackgroundBrush}" />
      <Border x:Name="PressedBorder" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{DynamicResource PressedBrush}" />
      <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
      <Border x:Name="FocusVisualElement" IsHitTestVisible="false" BorderBrush="{DynamicResource ButtonNormalBorder}" Margin="0" Opacity="1" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" />
    </Grid>
    <!-- <ControlTemplate.Triggers>
      <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="BorderBrush" TargetName="FocusVisualElement" Value="{DynamicResource DefaultedBorderBrush}"/>
      </Trigger>
      
      <Trigger Property="IsPressed" Value="true">
        <Setter Property="Opacity" TargetName="PressedBorder" Value="1"/>
        <Setter Property="Background" TargetName="PressedBorder" Value="{DynamicResource PressedBrush}"/>
      </Trigger>
      
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:disabled">

        		<Style Selector="^ /template/ Grid#Grid">
			<Setter Property="Opacity" Value="1"/>
		</Style>

        		<Style Selector="^ /template/ Grid#Grid">
			<Setter Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
		</Style>

      	</Style>
	<Style Selector="^:checked">

        		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Opacity" Value="1"/>
		</Style>

        		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
		</Style>

      	</Style>
	<Style Selector="^:pointerover">

        		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Opacity" Value="1"/>
		</Style>

      	</Style>
--></ControlTemplate>

  <ControlTheme x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
    
    <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
    <Setter Property="Template" Value="{StaticResource SimpleToggleButtonTemplate}" />
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Margin" Value="0"/>
<Style Selector="^:disabled">

        		<Style Selector="^ /template/ Grid#Grid">
			<Setter Property="Opacity" Value="1"/>
		</Style>

        		<Style Selector="^ /template/ Grid#Grid">
			<Setter Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
		</Style>

      	</Style>
	<Style Selector="^:checked">

        		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Opacity" Value="1"/>
		</Style>

        		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
		</Style>

      	</Style>
	<Style Selector="^:pointerover">

        		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Opacity" Value="1"/>
		</Style>

      	</Style>    
  </ControlTheme>

  <ControlTheme x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{x:Null}" >
    
    <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Template" Value="{DynamicResource ButtonTemplate}" />
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Margin" Value="0"/>
  </ControlTheme>
  <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
    <Grid x:Name="Grid">
      <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}"/>
      <Border x:Name="HoverBorder" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource ButtonHoverBackgroundBrush}"/>
      <Border x:Name="PressedBorder" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource PressedBrush}"/>
      <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
      <Border x:Name="FocusVisualElement" IsHitTestVisible="false" BorderBrush="{DynamicResource ButtonNormalBorder}" Margin="0" Opacity="1" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}"/>
    </Grid>
    <!-- <ControlTemplate.Triggers>
      <Trigger Property="IsDefault" Value="True"/>
      <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="BorderBrush" TargetName="FocusVisualElement" Value="{DynamicResource DefaultedBorderBrush}"/>
      </Trigger>
      
      <Trigger Property="IsPressed" Value="true">
        <Setter Property="Opacity" TargetName="PressedBorder" Value="1"/>
        <Setter Property="Background" TargetName="PressedBorder" Value="{DynamicResource PressedBrush}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="true" />
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" TargetName="Grid" Value="0.25" />
      </Trigger>
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:pointerover">

        		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Opacity" Value="1"/>
		</Style>


      	</Style>
--></ControlTemplate>

  
  
  <ControlTheme x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}" >
    
    
    <Setter Property="Background" Value="{DynamicResource ComboBoxBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Template" Value="{DynamicResource CheckBoxTemplate}" />
  <Style Selector="^:disabled">

        		<Style Selector="^ /template/ Rectangle#Background">
			<Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}"/>
		</Style>

        		<Style Selector="^ /template/ Rectangle#Background">
			<Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}"/>
		</Style>

        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        		<Style Selector="^ /template/ Panel#bulletDecorator">
			<Setter Property="Opacity" Value="0.5"/>
		</Style>

      	</Style>
	<Style Selector="^:pointerover">

        		<Style Selector="^ /template/ Rectangle#ContentFocusVisualElement">
			<Setter Property="Opacity" Value="1"/>
		</Style>

      	</Style>
	<Style Selector="^:checked">

        		<Style Selector="^ /template/ Path#CheckIcon">
			<Setter Property="Opacity" Value="1"/>
		</Style>

      	</Style>
    
  </ControlTheme>

  <ControlTemplate x:Key="CheckBoxTemplate" TargetType="{x:Type CheckBox}">
    <Panel Background="Transparent" x:Name="bulletDecorator">
      <Panel>
        <Grid Width="16" Height="16" Margin="0">
          <Rectangle  Margin="1" x:Name="Background"  Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" />
          <Path Height="10" Margin="1,1,0,1.5" x:Name="CheckIcon" Width="10.5" Opacity="0" Fill="{StaticResource GlyphBrush}" Stretch="Fill" Data="M102.03442,598.79645 L105.22962,597.78918 L106.78825,600.42358 C106.78825,600.42358 108.51028,595.74304 110.21724,593.60419 C112.00967,591.35822 114.89314,591.42316 114.89314,591.42316 C114.89314,591.42316 112.67844,593.42645 111.93174,594.44464 C110.7449,596.06293 107.15683,604.13837 107.15683,604.13837 z" />
          <Rectangle  x:Name="IndeterminateIcon"  Opacity="0" Fill="{StaticResource GlyphBrush}" Margin="4" />
          <Rectangle Height="14" x:Name="DisabledVisualElement" Width="14" Opacity="0" Fill="{StaticResource DisabledBackgroundBrush}" />
          <Rectangle  x:Name="ContentFocusVisualElement"  IsHitTestVisible="false" Opacity="0" Stroke="{DynamicResource HoverTextBorderBrush}" StrokeThickness="1" Margin="1" />
        </Grid>
      </Panel>
      <ContentPresenter x:Name="PART_ContentPresenter"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                Content="{TemplateBinding Content}"
                Margin="5,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Left"
                RecognizesAccessKey="True"
                TextWrapping="Wrap" />
    </Panel>
    <!-- <ControlTemplate.Triggers>
      <Trigger Property="IsFocused" Value="True">
        <Setter Property="Opacity" TargetName="ContentFocusVisualElement" Value="1"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsChecked" Value="True" />
          <Condition Property="IsThreeState" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Opacity" TargetName="CheckIcon" Value="1"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsChecked" Value="{x:Null}" />
          <Condition Property="IsThreeState" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Visibility" TargetName="CheckIcon" Value="Hidden" />
        <Setter Property="Opacity" TargetName="IndeterminateIcon" Value="1"/>
      </MultiTrigger>
      
      
      <Trigger Property="IsMouseOver" Value="False">
        <Setter Property="Opacity" TargetName="ContentFocusVisualElement" Value="0"/>
      </Trigger>
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:disabled">

        		<Style Selector="^ /template/ Rectangle#Background">
			<Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}"/>
		</Style>

        		<Style Selector="^ /template/ Rectangle#Background">
			<Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}"/>
		</Style>

        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        		<Style Selector="^ /template/ Panel#bulletDecorator">
			<Setter Property="Opacity" Value="0.5"/>
		</Style>

      	</Style>
	<Style Selector="^:pointerover">

        		<Style Selector="^ /template/ Rectangle#ContentFocusVisualElement">
			<Setter Property="Opacity" Value="1"/>
		</Style>

      	</Style>
	<Style Selector="^:checked">

        		<Style Selector="^ /template/ Path#CheckIcon">
			<Setter Property="Opacity" Value="1"/>
		</Style>

      	</Style>
--></ControlTemplate>

  <ControlTheme x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}" >
    
    
    <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Template" Value="{DynamicResource RadioButtonTemplate}" />
  </ControlTheme>

  

  <ControlTheme x:Key="{x:Type RepeatButton}" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}" >
    <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid>
            <Border x:Name="Border" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" Opacity="1" />
            <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"  Opacity="1"  />
	<!-- <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Opacity="1"  /> -->
          </Grid>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="ContentPresenter" Property="Opacity" Value="0.5"/>
            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              		<Style Selector="^ /template/ ContentPresenter#ContentPresenter">
			<Setter Property="Opacity" Value="0.25"/>
		</Style>

            	</Style>
</ControlTheme>

  <ControlTheme x:Key="VerticalScrollBarThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="{StaticResource ScrollBarBrush}">
            <Rectangle x:Name="ThumbRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="4,0" Fill="{DynamicResource ScrollBarThumbBackgroundBrush}"/>
          </Border>
          <!-- <ControlTemplate.Triggers>
            
            
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="ThumbRectangle" Property="Fill" Value="{StaticResource ScrollBarThumbPressedBackgroundBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              		<Style Selector="^ /template/ Rectangle#ThumbRectangle">
			<Setter Property="Fill" Value="{StaticResource ScrollBarThumbDisabledBrush}"/>
		</Style>

            	</Style>
	<Style Selector="^:pointerover">

              		<Style Selector="^ /template/ Rectangle#ThumbRectangle">
			<Setter Property="Fill" Value="{StaticResource ScrollBarThumbMouseOverBackgroundBrush}"/>
		</Style>

            	</Style>
</ControlTheme>
  <ControlTheme x:Key="HorizontalScrollBarThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="{StaticResource ScrollBarBrush}">
            <Rectangle x:Name="ThumbRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,4" Fill="{DynamicResource ScrollBarThumbBackgroundBrush}"/>
          </Border>
          <!-- <ControlTemplate.Triggers>
            
            
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="ThumbRectangle" Property="Fill" Value="{StaticResource ScrollBarThumbPressedBackgroundBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              		<Style Selector="^ /template/ Rectangle#ThumbRectangle">
			<Setter Property="Fill" Value="{StaticResource ScrollBarThumbDisabledBrush}"/>
		</Style>

            	</Style>
	<Style Selector="^:pointerover">

              		<Style Selector="^ /template/ Rectangle#ThumbRectangle">
			<Setter Property="Fill" Value="{StaticResource ScrollBarThumbMouseOverBackgroundBrush}"/>
		</Style>

            	</Style>
</ControlTheme>

  <ControlTheme x:Key="ScrollBarArrowRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid>
            <Rectangle Fill="{StaticResource ScrollBarArrowBackgroundBrush}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTemplate x:Key="VerticalScrollBarControlTemplate" TargetType="{x:Type ScrollBar}">
    <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static wnd:SystemParameters.VerticalScrollBarWidthKey}}" Background="{DynamicResource ScrollBarBrush}">
      <Grid.RowDefinitions>
        <RowDefinition MaxHeight="17" />
        <RowDefinition Height="*" />
        <RowDefinition MaxHeight="17" />
      </Grid.RowDefinitions>
      <!-- Scroll Up Button -->
      <RepeatButton Grid.Row="0" x:Name="PART_LineUpButton"  Theme="{DynamicResource {x:Type RepeatButton}}">
        <Grid Background="{DynamicResource ScrollBarArrowBackgroundBrush}">
          <Path x:Name="DecreaseArrow" Fill="{DynamicResource ScrollBarArrowGlyphBrush}" Data="F1 M17,17z M0,0z M8.5,6.5L13,11 4,11z"/>
        </Grid>
      </RepeatButton>
      <!-- Track and Thumb -->
      <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="True" Value="{TemplateBinding Value, Mode=TwoWay}">
        <Track.Thumb>
          <Thumb Theme="{DynamicResource VerticalScrollBarThumbStyle}"/>
        </Track.Thumb>
        <Track.IncreaseButton>
          <RepeatButton x:Name="PART_PageUpButton" Theme="{DynamicResource ScrollBarArrowRepeatButtonStyle}"  />
        </Track.IncreaseButton>
        <Track.DecreaseButton>
          <RepeatButton x:Name="PART_PageDownButton" Theme="{DynamicResource ScrollBarArrowRepeatButtonStyle}"  />
        </Track.DecreaseButton>
      </Track>
      <!-- Scroll Down Button -->
      <RepeatButton Grid.Row="2" x:Name="PART_LineDownButton"  Theme="{DynamicResource {x:Type RepeatButton}}">
        <Grid Background="{DynamicResource ScrollBarArrowBackgroundBrush}">
          <Path x:Name="IncreaseArrow" Fill="{DynamicResource ScrollBarArrowGlyphBrush}" Data="F1 M17,17z M0,0z M8.5,10.5L4,6 13,6z"/>
        </Grid>
      </RepeatButton>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="HorizontalScrollBarControlTemplate" TargetType="{x:Type ScrollBar}">
    <Grid x:Name="GridRoot" Height="{DynamicResource {x:Static wnd:SystemParameters.HorizontalScrollBarHeightKey}}" Background="{DynamicResource ScrollBarBrush}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition MaxWidth="17" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition MaxWidth="17" />
      </Grid.ColumnDefinitions>
      <!-- Scroll Left Button -->
      <RepeatButton Grid.Column="0" x:Name="PART_LineUpButton"  Background="{x:Null}" BorderBrush="{x:Null}" Foreground="{x:Null}" Theme="{DynamicResource {x:Type RepeatButton}}">
        <Grid Background="{DynamicResource ScrollBarArrowBackgroundBrush}">
          <Path x:Name="DecreaseArrow" Fill="{DynamicResource ScrollBarArrowGlyphBrush}" Data="F1 M17,17z M0,0z M6.5,8.5L11,4 11,13z"/>
        </Grid>
      </RepeatButton>
      <!-- Track and Thumb -->
      <Track Grid.Column="1" x:Name="PART_Track" Orientation="Horizontal" Value="{TemplateBinding Value, Mode=TwoWay}">
        <Track.Thumb>
          <Thumb Theme="{DynamicResource HorizontalScrollBarThumbStyle}"/>
        </Track.Thumb>
        <Track.IncreaseButton>
          <RepeatButton x:Name="PART_PageUpButton" Theme="{DynamicResource ScrollBarArrowRepeatButtonStyleBrush}" />
        </Track.IncreaseButton>
        <Track.DecreaseButton>
          <RepeatButton x:Name="PART_PageDownButton" Theme="{DynamicResource ScrollBarArrowRepeatButtonStyleBrush}" />
        </Track.DecreaseButton>
      </Track>
      <!-- Scroll Right Button -->
      <RepeatButton Grid.Column="2" x:Name="PART_LineDownButton"  Background="{x:Null}" BorderBrush="{x:Null}" Foreground="{x:Null}" Theme="{DynamicResource {x:Type RepeatButton}}">
        <Grid Background="{DynamicResource ScrollBarArrowBackgroundBrush}">
          <Path x:Name="IncreaseArrow" Fill="{DynamicResource ScrollBarArrowGlyphBrush}" Data="F1 M17,17z M0,0z M10.5,8.5L6,13 6,4z"/>
        </Grid>
      </RepeatButton>
    </Grid>
  </ControlTemplate>

  <ControlTheme x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource {x:Type ScrollBar}}" >
    
    <Setter Property="Foreground" Value="{StaticResource ControlTextBrushKey}" />
    
    <Style Selector="^[Orientation=Horizontal]">
<Setter Property="Height" Value="18" />
<Setter Property="Template" Value="{StaticResource HorizontalScrollBarControlTemplate}" />
</Style>
<Style Selector="^[Orientation=Vertical]">
<Setter Property="Width" Value="18" />
<Setter Property="Template" Value="{StaticResource VerticalScrollBarControlTemplate}" />
</Style>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ListBox}" TargetType="ListBox">
    
    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    

    

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBox">
          <Border Name="Bd" BorderThickness="{TemplateBinding Border.BorderThickness}" Padding="0" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" >
            <ScrollViewer  Focusable="False">
              <ItemsPresenter  Margin="0,0,1,0" ItemsPanel="{TemplateBinding ItemsPanel}"/>
            </ScrollViewer>
          </Border>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="True">
              <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ListBoxItem}" d:IsControlPart="True" TargetType="{x:Type ListBoxItem}" >
    
    
    <Setter Property="Margin" Value="0"/>
    <Setter Property="Padding" Value="6,3,6,3"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid  Background="Transparent" Margin="{TemplateBinding Margin}">
            <Rectangle x:Name="Background" IsHitTestVisible="False" Opacity="1" Fill="{TemplateBinding Background}"/>
            <Rectangle x:Name="HoverRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource NormalBrush}"/>
            <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource SelectedBackgroundBrush}"/>
            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" x:Name="contentPresenter">
              <ContentPresenter.Resources>
                <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}" >
                  <!-- <ControlTheme.Triggers>
                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Mode=OneWay}" Value="True">
                      <Setter Property="Foreground" Value="{StaticResource SelectedTextBrush}"/>
                    </DataTrigger>
                  </ControlTheme.Triggers> -->
                </ControlTheme>
              </ContentPresenter.Resources>
            </ContentPresenter>
            <Rectangle x:Name="FocusVisualElement" Stroke="{StaticResource HoverShineBrush}" StrokeThickness="0" Opacity="0" IsHitTestVisible="False" Margin="1,1,1,1"/>
          </Grid>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
              <Setter Property="Opacity" TargetName="FocusVisualElement" Value="1"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="Opacity" TargetName="SelectedRectangle" Value="1"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="Selector.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="Opacity" TargetName="HoverRectangle" Value="1"/>
            </MultiTrigger>
            
          </ControlTemplate.Triggers> -->
        <!--	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
            	</Style>
--></ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <!-- --><!-- <ControlTheme.Triggers>
      <Trigger Property="Selector.IsSelected" Value="True">
        <Setter Property="Foreground">
          <Setter.Value>
            <SolidColorBrush Color="{DynamicResource BlackColor}" />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTheme.Triggers> --><!-- -->
  </ControlTheme>

  

  <ControlTheme x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Template" Value="{DynamicResource PropertyGridExpander}"/>
  </ControlTheme>

  <ControlTheme x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          
            
            
            
            
          
          <Border Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
            <Grid  Background="Transparent">
              <Grid.RowDefinitions>
                <RowDefinition Height="19" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <LayoutTransformControl>
                  <LayoutTransformControl.LayoutTransform>
                      
                        <RotateTransform Angle="-90" />
                      
                    
	</LayoutTransformControl.LayoutTransform>
                
	<Grid>
                <Rectangle Margin="2,2,2,2" x:Name="Rectangle" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                <Rectangle Margin="2,2,2,2" x:Name="ShineRectangle" Fill="{DynamicResource ShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                <Rectangle Margin="2,2,2,2" x:Name="HoverRectangle" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                <Rectangle Margin="2,2,2,2" x:Name="HoverShineRectangle" Fill="{DynamicResource HoverShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                <Rectangle Margin="2,2,2,2" x:Name="PressedRectangle" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" />
                <Path IsVisible="false" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" />
              </Grid>
	</LayoutTransformControl>
              <LayoutTransformControl>
                  <LayoutTransformControl.LayoutTransform>
                      
                        <RotateTransform Angle="-90" />
                      
                    
	</LayoutTransformControl.LayoutTransform>
                
	<ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"  HorizontalAlignment="Center" Margin="2,4,4,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True">
	</ContentPresenter>
</LayoutTransformControl>
            </Grid>
          </Border>
          <!-- <ControlTemplate.Triggers>
            
            
            <Trigger Property="IsPressed" Value="true">
              --><!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
              </Trigger.ExitActions> --><!--
              --><!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
              </Trigger.EnterActions> --><!--
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:pointerover">

              <!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
              </Trigger.ExitActions> -->
              <!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </Trigger.EnterActions> -->

            	</Style>
	<Style Selector="^:checked">

              		<Style Selector="^ /template/ Path#Up_Arrow">
			<Setter Property="IsVisible" Value="false"/>
		</Style>

              		<Style Selector="^ /template/ Path#Down_Arrow">
			<Setter Property="IsVisible" Value="true"/>
		</Style>

            	</Style>
</ControlTheme>
  <ControlTheme x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          
            
            
            
            
          
          <Border Padding="{TemplateBinding Padding}" CornerRadius="2,2,2,2" BorderThickness="1,1,1,1" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
            <Grid  Background="Transparent">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="19" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <LayoutTransformControl>
                  <LayoutTransformControl.LayoutTransform>
                      
                        <RotateTransform Angle="180" />
                      
                    
	</LayoutTransformControl.LayoutTransform>
                
	<Grid>
                <Rectangle Margin="2,2,2,2" x:Name="Rectangle" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                <Rectangle Margin="2,2,2,2" x:Name="ShineRectangle" Fill="{DynamicResource ShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                <Rectangle Margin="2,2,2,2" x:Name="HoverRectangle" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                <Rectangle Margin="2,2,2,2" x:Name="HoverShineRectangle" Fill="{DynamicResource HoverShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                <Rectangle Margin="2,2,2,2" x:Name="PressedRectangle" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" />
                <Path IsVisible="false" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" />
              </Grid>
	</LayoutTransformControl>
              <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"  HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
            </Grid>
          </Border>
          <!-- <ControlTemplate.Triggers>
            
            
            <Trigger Property="IsPressed" Value="true">
              --><!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
              </Trigger.ExitActions> --><!--
              --><!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
              </Trigger.EnterActions> --><!--
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:pointerover">

              <!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
              </Trigger.ExitActions> -->
              <!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </Trigger.EnterActions> -->

            	</Style>
	<Style Selector="^:checked">

              		<Style Selector="^ /template/ Path#Up_Arrow">
			<Setter Property="IsVisible" Value="false"/>
		</Style>

              		<Style Selector="^ /template/ Path#Down_Arrow">
			<Setter Property="IsVisible" Value="true"/>
		</Style>

            	</Style>
</ControlTheme>
  <ControlTheme x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          
            
            
            
            
          
          <Border Padding="{TemplateBinding Padding}" CornerRadius="2,2,2,2" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1">
            <Grid  Background="Transparent">
              <Grid.RowDefinitions>
                <RowDefinition Height="19" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <LayoutTransformControl>
                  <LayoutTransformControl.LayoutTransform>
                      
                        <RotateTransform Angle="90" />
                      
                    
	</LayoutTransformControl.LayoutTransform>
                
	<Grid>
                <Rectangle Margin="2,2,2,2" x:Name="Rectangle" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                <Rectangle Margin="2,2,2,2" x:Name="ShineRectangle" Fill="{DynamicResource ShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                <Rectangle Margin="2,2,2,2" x:Name="HoverRectangle" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                <Rectangle Margin="2,2,2,2" x:Name="HoverShineRectangle" Fill="{DynamicResource HoverShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                <Rectangle Margin="2,2,2,2" x:Name="PressedRectangle" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" />
                <Path IsVisible="false" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" />
              </Grid>
	</LayoutTransformControl>
              <LayoutTransformControl>
                  <LayoutTransformControl.LayoutTransform>
                      
                        <RotateTransform Angle="90" />
                      
                    
	</LayoutTransformControl.LayoutTransform>
                
	<ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"  HorizontalAlignment="Center" Margin="4,4,2,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True">
	</ContentPresenter>
</LayoutTransformControl>
            </Grid>
          </Border>
          <!-- <ControlTemplate.Triggers>
            
            
            <Trigger Property="IsPressed" Value="true">
              --><!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
              </Trigger.ExitActions> --><!--
              --><!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
              </Trigger.EnterActions> --><!--
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:pointerover">

              <!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
              </Trigger.ExitActions> -->
              <!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </Trigger.EnterActions> -->

            	</Style>
	<Style Selector="^:checked">

              		<Style Selector="^ /template/ Path#Up_Arrow">
			<Setter Property="IsVisible" Value="false"/>
		</Style>

              		<Style Selector="^ /template/ Path#Down_Arrow">
			<Setter Property="IsVisible" Value="true"/>
		</Style>

            	</Style>
</ControlTheme>

  <ControlTheme x:Key="{x:Type Expander}" TargetType="{x:Type Expander}" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Background" Value="{DynamicResource InnerExpanderBackgroundBrush}"/>
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="BorderBrush" Value="{DynamicResource InnerExpanderBorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template" Value="{DynamicResource ExpanderTemplate}"/>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}" >
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="BorderBrush" Value="{StaticResource SolidBorderBrush}"/>
    <Setter Property="Background" Value="{StaticResource NormalBorderBrush}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid>
            <Border x:Name="PART_Track" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"/>
            <Border HorizontalAlignment="Left" x:Name="PART_Indicator" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Border.Background>
                <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                  <GradientStop Color="#B2FFFFFF" Offset="0" />
                  <GradientStop Color="#C6FFFFFF" Offset="0.15" />
                  <GradientStop Color="#D1FFFFFF" Offset="0.275" />
                  <GradientStop Color="#C6FFFFFF" Offset="0.4" />
                  <GradientStop Color="#BFFFFFFF" Offset="0.65" />
                  <GradientStop Color="#A5FFFFFF" Offset="0.75" />
                  <GradientStop Color="#91FFFFFF" Offset="0.85" />
                  <GradientStop Color="#72FFFFFF" Offset="1" />
                </LinearGradientBrush>
              </Border.Background>
            </Border>
            <Grid x:Name="IndeterminateRoot" IsVisible="false">
              <Rectangle Margin="{TemplateBinding BorderThickness}" Opacity="0.25">
                <Rectangle.Fill>
                  <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                    <GradientStop Color="#B2FFFFFF" Offset="0" />
                    <GradientStop Color="#C6FFFFFF" Offset="0.15" />
                    <GradientStop Color="#D1FFFFFF" Offset="0.275" />
                    <GradientStop Color="#C6FFFFFF" Offset="0.4" />
                    <GradientStop Color="#BFFFFFFF" Offset="0.65" />
                    <GradientStop Color="#A5FFFFFF" Offset="0.75" />
                    <GradientStop Color="#91FFFFFF" Offset="0.85" />
                    <GradientStop Color="#72FFFFFF" Offset="1" />
                  </LinearGradientBrush>
                </Rectangle.Fill>
              </Rectangle>
              <Rectangle Margin="{TemplateBinding BorderThickness}" x:Name="IndeterminateGradientFill" StrokeThickness="1" Opacity="0.5">
                <Rectangle.Fill>
                  <LinearGradientBrush EndPoint="0,1"
                                                             
                                                             SpreadMethod="Repeat"
                                                             StartPoint="20,1">
                    <LinearGradientBrush.Transform>
                      <TransformGroup>
                        <TranslateTransform X="0"
                                                                         />
                        <SkewTransform AngleX="-30" />
                      </TransformGroup>
                    </LinearGradientBrush.Transform>
                    <GradientStop Color="#33858585" Offset="0" />
                    <GradientStop Color="#33999999" Offset="0.65" />
                    <GradientStop Color="#4C000000" Offset="0.10" />
                    <GradientStop Color="#4C000000" Offset="0.55" />
                  </LinearGradientBrush>
                </Rectangle.Fill>
              </Rectangle>
            </Grid>
            <Border Background="{StaticResource DisabledBackgroundBrush}" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource DisabledBorderBrush}" x:Name="border"/>
          </Grid>
          <!-- <ControlTemplate.Triggers>
            
            <Trigger Property="IsIndeterminate" Value="True">
              --><!-- <Trigger.EnterActions>
                <BeginStoryboard x:Name="IndeterminateOnStoryboard">
                  
                </BeginStoryboard>
              </Trigger.EnterActions> --><!--
              --><!-- <Trigger.ExitActions>
                <StopStoryboard BeginStoryboardName="IndeterminateOnStoryboard"/>
              </Trigger.ExitActions> --><!--
              <Setter Property="IsVisible" TargetName="IndeterminateRoot" Value="true"/>
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              		<Style Selector="^ /template/ Border#border">
			<Setter Property="Opacity" Value="0.8"/>
		</Style>

            	</Style>
</ControlTheme>

  <ControlTheme x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}" >
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    
    
    <Setter Property="Template" Value="{DynamicResource TextBoxTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource NormalTextBorderBrush}"/>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:TextBox}" TargetType="ctrl:TextBox" BasedOn="{StaticResource {x:Type TextBox}}" >
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:TextBox">
          <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
            <Grid>
              <ScrollViewer x:Name="PART_ContentHost"  Padding="{TemplateBinding Padding}" IsVisible="{TemplateBinding IsFocused}">
		<TextPresenter x:Name="PART_TextPresenter" Text="{TemplateBinding Text, Mode=TwoWay}" CaretIndex="{TemplateBinding CaretIndex}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" LineHeight="{TemplateBinding LineHeight}" LetterSpacing="{TemplateBinding LetterSpacing}" PasswordChar="{TemplateBinding PasswordChar}" RevealPassword="{TemplateBinding RevealPassword}" SelectionBrush="{TemplateBinding SelectionBrush}" SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}" CaretBrush="{TemplateBinding CaretBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
	</ScrollViewer>
              <ContentControl x:Name="Watermark" Content="{TemplateBinding WatermarkContent}" ContentTemplate="{TemplateBinding WatermarkContentTemplate}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="6,2,2,2" Focusable="False"/>
              <TextBlock x:Name="PART_TrimmedText" Text="{TemplateBinding TrimmedText}" Cursor="IBeam" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="3,2" Focusable="False" IsVisible="{TemplateBinding IsFocused, Converter={cvt:InvertBool}}"/>
            </Grid>
          </Border>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="HasText" Value="True">
              <Setter TargetName="Watermark" Property="IsVisible" Value="false"/>
            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="WatermarkContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding Mode=OneTime}" IsHitTestVisible="False" FontStyle="Italic" Foreground="Gray"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              		<Style Selector="^ /template/ TextBlock#PART_TrimmedText">
			<Setter Property="Foreground" Value="Gray"/>
		</Style>

            	</Style>
</ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:NumericTextBox}" TargetType="ctrl:NumericTextBox" BasedOn="{StaticResource {x:Type TextBox}}" >
    <Setter Property="BorderThickness" Value="1,1,1,1"/>
    <Setter Property="Padding" Value="1,1,1,1"/>
    <Setter Property="SelectAllOnFocus" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:NumericTextBox">
          <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
            <DockPanel LastChildFill="True">
              <UniformGrid x:Name="upDownButtons" HorizontalAlignment="Stretch" DockPanel.Dock="Right" Rows="2" Focusable="False" IsVisible="false" MaxWidth="16">
                <RepeatButton x:Name="PART_IncreaseButton" Command="{x:Static ctrl:NumericTextBox.SmallIncreaseCommand}">
                  <Grid Margin="2,0" Background="Transparent">
                    <Path HorizontalAlignment="Stretch"   Fill="{StaticResource GlyphBrush}" Stretch="Uniform" Stroke="{StaticResource GlyphBrush}" StrokeThickness="1" Data="M-4,2 L4,2 0,-2 z"/>
                  </Grid>
                </RepeatButton>
                <RepeatButton x:Name="PART_DecreaseButton" Command="{x:Static ctrl:NumericTextBox.SmallDecreaseCommand}">
                  <Grid Margin="2,0" Background="Transparent">
                    <Path HorizontalAlignment="Stretch"   Fill="{DynamicResource TextBrush}" Stretch="Uniform" Stroke="{StaticResource GlyphBrush}" StrokeThickness="1" Data="M4,-2 L-4,-2 0,2 z"/>
                  </Grid>
                </RepeatButton>
              </UniformGrid>
              <Grid>
                <ScrollViewer x:Name="PART_ContentHost"  Padding="{TemplateBinding Padding}">
		<TextPresenter x:Name="PART_TextPresenter" Text="{TemplateBinding Text, Mode=TwoWay}" CaretIndex="{TemplateBinding CaretIndex}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" LineHeight="{TemplateBinding LineHeight}" LetterSpacing="{TemplateBinding LetterSpacing}" PasswordChar="{TemplateBinding PasswordChar}" RevealPassword="{TemplateBinding RevealPassword}" SelectionBrush="{TemplateBinding SelectionBrush}" SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}" CaretBrush="{TemplateBinding CaretBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
	</ScrollViewer>
                <ContentControl x:Name="Watermark" Content="{TemplateBinding WatermarkContent}" ContentTemplate="{TemplateBinding WatermarkContentTemplate}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="6,2,2,2" Focusable="False"/>
              </Grid>
            </DockPanel>
          </Border>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="HasText" Value="True">
              <Setter TargetName="Watermark" Property="IsVisible" Value="false"/>
            </Trigger>
            <Trigger Property="DisplayUpDownButtons" Value="True">
              <Setter TargetName="upDownButtons" Property="Visibility" Value="Visible"/>
            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="WatermarkContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding Mode=OneTime}" IsHitTestVisible="False" FontStyle="Italic" Foreground="Gray"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="interactivity:Interaction.Behaviors">
      <Setter.Value>
        <interactivity:BehaviorCollection>
          <behaviors:NumericTextBoxDragBehavior UsePreviewEvents="True"  />
        </interactivity:BehaviorCollection>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="Gray"/>
            	</Style>
</ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:TimeSpanEditor}" TargetType="ctrl:TimeSpanEditor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:TimeSpanEditor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="2*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="2*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="2*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="3*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <ctrl:NumericTextBox Value="{Binding Days, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}" Grid.Column="0"
                               DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="0"
                               WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                               WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <Label Content=" d " Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1"/>
            <ctrl:NumericTextBox Value="{Binding Hours, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}" Grid.Column="2"
                               DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="0" Maximum="23"
                               WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                               WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <Label Content=" h " Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="3"/>
            <ctrl:NumericTextBox Value="{Binding Minutes, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}" Grid.Column="4"
                               DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="0" Maximum="59"
                               WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                               WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <Label Content=" min " Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="5"/>
            <ctrl:NumericTextBox Value="{Binding Seconds, RelativeSource={RelativeSource Mode=TemplatedParent}}" Grid.Column="6"
                               DecimalPlaces="7" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="0.0000000" Maximum="59.9999999"
                               WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                               WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <Label Content=" s " Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="7"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:DateTimeEditor}" TargetType="ctrl:DateTimeEditor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:DateTimeEditor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <ctrl:TextBox Grid.Column="0" IsReadOnly="True" SelectAllOnFocus="True" Margin="-1" TextAlignment="Left"
                          Text="{Binding Value, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:DateTimeToString}}"
                          WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                          WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ToggleButton Grid.Column="1" Margin="2,0,0,0" x:Name="ToggleButtonPickDate" Width="16" Height="16" Background="Transparent" ToolTip.Tip="{sd:Localize Pick date and time, Context=ToolTip}"
                          ClickMode="Press" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <Image Width="16" Height="16" Margin="-1" Source="{Binding Source={StaticResource ImagePickDateTime}, Path=Source}" RenderOptions.BitmapInterpolationMode="LowQuality"/>
            </ToggleButton>
            <Popup x:Name="PART_Popup" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" 
                   MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=ctrl:DateTimeEditor}}" IsLightDismissEnabled="True"
                   PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType=ctrl:DateTimeEditor}}" >
              <Border  Background="{StaticResource BackgroundBrush}" BorderBrush="Black" BorderThickness="1">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                  </Grid.RowDefinitions>
                  <Grid Grid.Row="0" Margin="4">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ctrl:NumericTextBox Value="{Binding Year, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}" Grid.Column="0"
                               DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="1" Maximum="9999"/>
                    <Label Content=" y " Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="1"/>
                    <ctrl:NumericTextBox Value="{Binding Month, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}" Grid.Column="2"
                               DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="1" Maximum="12"/>
                    <Label Content=" m " Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="3"/>
                    <ctrl:NumericTextBox Value="{Binding Day, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}" Grid.Column="4"
                               DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="1"/>
                    <Label Content=" d " Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="5"/>
                  </Grid>
                  <Grid Grid.Row="1" Margin="4">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ctrl:NumericTextBox Value="{Binding Hour, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}" Grid.Column="0"
                               DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="0" Maximum="23"/>
                    <Label Content=" h " Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="1"/>
                    <ctrl:NumericTextBox Value="{Binding Minute, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}" Grid.Column="2"
                               DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="0" Maximum="59"/>
                    <Label Content=" min " Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="3"/>
                    <ctrl:NumericTextBox Value="{Binding Second, RelativeSource={RelativeSource Mode=TemplatedParent}}" Grid.Column="4"
                               DecimalPlaces="7" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Right" Minimum="0.0000000" Maximum="59.9999999"/>
                    <Label Content=" s " Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="5"/>
                  </Grid>
                </Grid>
              </Border>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>
  
  <Color x:Key="TextBoxFocusBrush">#FF374C5C</Color>

  <ControlTemplate x:Key="TextBoxTemplate" TargetType="{x:Type TextBox}">
    
      
      
      
      
    
    <Grid>
      <Border x:Name="Border" Opacity="1" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
        <Grid>
          <Border BorderThickness="1">
            <ScrollViewer Margin="0" x:Name="PART_ContentHost" Theme="{DynamicResource NuclearScrollViewer}" >
		<TextPresenter x:Name="PART_TextPresenter" Text="{TemplateBinding Text, Mode=TwoWay}" CaretIndex="{TemplateBinding CaretIndex}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" LineHeight="{TemplateBinding LineHeight}" LetterSpacing="{TemplateBinding LetterSpacing}" PasswordChar="{TemplateBinding PasswordChar}" RevealPassword="{TemplateBinding RevealPassword}" SelectionBrush="{TemplateBinding SelectionBrush}" SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}" CaretBrush="{TemplateBinding CaretBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
	</ScrollViewer>
          </Border>
        </Grid>
      </Border>
      <Border x:Name="HoverBorder" IsHitTestVisible="False" Opacity="0" BorderBrush="{DynamicResource HoverTextBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
      <Border x:Name="FocusVisualElement" IsHitTestVisible="False" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" >
        <Border.BorderBrush>
          <SolidColorBrush Color="{DynamicResource TextBoxFocusBrush}"/>
        </Border.BorderBrush>
      </Border>
    </Grid>
    <!-- <ControlTemplate.Triggers>
      <Trigger Property="IsFocused" Value="True">
        --><!-- <Trigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard" />
        </Trigger.ExitActions> --><!--
        --><!-- <Trigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard" />
        </Trigger.EnterActions> --><!--
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard" />
        </MultiTrigger.ExitActions>
        <MultiTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
        </MultiTrigger.EnterActions>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsFocused" Value="False" />
        </MultiTrigger.Conditions>
      </MultiTrigger>
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:disabled">

        		<Style Selector="^ /template/ Border#Border">
			<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
		</Style>

        		<Style Selector="^ /template/ Border#Border">
			<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}"/>
		</Style>

        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
      	</Style>
--></ControlTemplate>

  

  
  <ControlTheme x:Key="{x:Type Label}" TargetType="{x:Type Label}" >
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Label}">
          <Grid>
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Grid>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false" />
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
  </ControlTheme>

  <!--  MENUS  -->
  <ControlTheme x:Key="{x:Type Menu}" TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}">
    <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Background="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Menu}}}"  ClipToBounds="True" Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    
  </ControlTheme>

  <ControlTheme x:Key="MenuItem.SeparatorStyleKey" TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="{DynamicResource MenuBorderBrush}" />
    <Setter Property="Height" Value="0" />
    <Setter Property="Margin" Value="18,0,4,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}" BorderThickness="0,0.5,0,0" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="ComboBoxSeparator" TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="{DynamicResource MenuBorderBrush}"/>
    <Setter Property="Height" Value="1"/>
    <Setter Property="Margin" Value="2,0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}" BorderThickness="0" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTemplate x:Key="MenuItem.TopLevelHeaderTemplateKey"  TargetType="{x:Type MenuItem}">
    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" Margin="2">
      <Grid Margin="0,0,0,0">
        <Grid.ColumnDefinitions>
          <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Border Grid.Column="0" Grid.ColumnSpan="2" Background="{DynamicResource MenuHoverBrush}" Opacity="0" x:Name="HoverBorder"/>
        <ContentPresenter Grid.Column="0" Margin="6,3" x:Name="Icon" VerticalAlignment="Center" Content="{TemplateBinding Icon}" />
        <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" Content="{TemplateBinding Header}" Margin="2,1,2,1" VerticalAlignment="Center" HorizontalAlignment="Stretch" />
        <Popup IsLightDismissEnabled="False" Grid.Column="0" Grid.ColumnSpan="2" IsOpen="{TemplateBinding IsSubMenuOpen, Mode=TwoWay}" Placement="Bottom" x:Name="PART_Popup" Focusable="false"  >
          <Grid x:Name="SubMenu">
            <Border x:Name="SubMenuBorder" Background="{DynamicResource MenuBackgroundBrush}" BorderBrush="{DynamicResource MenuBorderBrush}" BorderThickness="0"/>
                        <ScrollViewer >
                          <ItemsPresenter Name="PART_ItemsPresenter"
                                          Margin="2"
                                          Grid.IsSharedSizeScope="True"
                                          ItemsPanel="{TemplateBinding ItemsPanel}" />
                        </ScrollViewer>
          </Grid>
        </Popup>
      </Grid>
    </Border>
    <!-- <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="True">
        <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup" />
      </Trigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter Property="IsVisible" Value="false" TargetName="Icon" />
      </Trigger>
      
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:disabled">

        <Setter Property="Foreground" Value="Gray" />
        		<Style Selector="^ /template/ ContentPresenter#HeaderHost">
			<Setter Property="Opacity" Value="0.5"/>
		</Style>

      	</Style>
	<Style Selector="^:selected">

        		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Opacity" Value="1"/>
		</Style>

        <Setter Property="Foreground" Value="Black" />
      	</Style>
--></ControlTemplate>

  <ControlTemplate x:Key="MenuItem.TopLevelItemTemplateKey"  TargetType="{x:Type MenuItem}">
    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" Margin="2">
      <Grid Margin="0,0,0,0">
        <Grid.ColumnDefinitions>
          <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Border Grid.Column="0" Grid.ColumnSpan="2" Background="{DynamicResource MenuHoverBrush}" Opacity="0" x:Name="HoverBorder"/>
        <ContentPresenter Grid.Column="0" Margin="6,3" x:Name="Icon" VerticalAlignment="Center" Content="{TemplateBinding Icon}" />
        <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" Content="{TemplateBinding Header}" Margin="2,1,2,1" VerticalAlignment="Center" HorizontalAlignment="Stretch" />
      </Grid>
    </Border>
    <!-- <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter Property="IsVisible" Value="false" TargetName="Icon" />
      </Trigger>
      
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:disabled">

        <Setter Property="Foreground" Value="Gray" />
        		<Style Selector="^ /template/ ContentPresenter#HeaderHost">
			<Setter Property="Opacity" Value="0.5"/>
		</Style>

      	</Style>
	<Style Selector="^:selected">

        		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Opacity" Value="1"/>
		</Style>

        <Setter Property="Foreground" Value="Black" />
      	</Style>
--></ControlTemplate>

  <ControlTheme x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
    
    <Setter Property="HorizontalAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="MinHeight" Value="18" />
    <Setter Property="BorderThickness" Value="0.5" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Grid.IsSharedSizeScope" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" Margin="3,0">
            <Grid x:Name="Grid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition  MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemContentColumnGroup" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                <ColumnDefinition  Width="14" />
              </Grid.ColumnDefinitions>
              <Border Grid.Column="0" Grid.ColumnSpan="5" Background="{DynamicResource MenuHoverBrush}" Opacity="0" x:Name="HoverBorder" />
              <ContentPresenter Grid.Column="0" Margin="5,5" x:Name="Icon" MaxHeight="14" VerticalAlignment="Center" Content="{TemplateBinding Icon}" />
              <Grid Grid.Column="0" IsVisible="false" Margin="4,2" x:Name="GlyphPanel" VerticalAlignment="Center">
                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight" />
              </Grid>
              <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" Content="{TemplateBinding Header}" Margin="0,3" VerticalAlignment="Center" HorizontalAlignment="Stretch"  />
              <TextBlock x:Name="IGTTextBlock" Grid.Column="3" Text="{TemplateBinding MenuItem.InputGesture}"  VerticalAlignment="Center" IsVisible="true"  />
              <Grid Grid.Column="4" Margin="4,2" x:Name="ArrowPanel" VerticalAlignment="Center">
                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z" />
              </Grid>
              <Popup IsLightDismissEnabled="False" IsOpen="{TemplateBinding IsSubMenuOpen, Mode=TwoWay}" Placement="Right" x:Name="PART_Popup"   >
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="3" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="3" />
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="1" />
                  </Grid.ColumnDefinitions>
                  <Border Grid.Row="0" Grid.ColumnSpan="3" Background="{StaticResource MenuBackgroundBrush}" />
                  <Border Grid.Row="2" Grid.ColumnSpan="3" Background="{StaticResource MenuBackgroundBrush}" />
                  <Border x:Name="SubmenuMainWrapperBorder" Grid.RowSpan="3" Grid.ColumnSpan="3" Background="{StaticResource MenuBackgroundBrush}" BorderBrush="{StaticResource MenuBorderBrush}" BorderThickness="0.5" />
                  <Grid x:Name="SubMenu" Grid.Row="1" Grid.Column="1">
                    <Border x:Name="SubMenuBorder" Background="{DynamicResource MenuBackgroundBrush}" BorderBrush="{DynamicResource MenuBorderBrush}" BorderThickness="0" />
<!--                     <StackPanel   Grid.IsSharedSizeScope="true" /> -->
                        <ScrollViewer >
                          <ItemsPresenter Name="PART_ItemsPresenter"
                                          Margin="2"
                                          ItemsPanel="{TemplateBinding ItemsPanel}" />
                        </ScrollViewer>
                    
                  </Grid>
                </Grid>
              </Popup>
            </Grid>
          </Border>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
              <Setter Property="Margin" Value="10,2" TargetName="HeaderHost" />
              <Setter Property="Grid.IsSharedSizeScope" Value="true" />
              <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup" />
              <Setter Property="IsVisible" Value="false" TargetName="GlyphPanel" />
              <Setter Property="IsVisible" Value="false" TargetName="ArrowPanel" />
              <Setter Property="IsVisible" Value="false" TargetName="Icon" />
              <Setter Property="MinWidth" Value="0" TargetName="IconColumn" />
              <Setter Property="Width" Value="0" TargetName="ArrowColumn" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
              <Setter Property="Margin" Value="10,2" TargetName="HeaderHost" />
              <Setter Property="IsVisible" Value="false" TargetName="GlyphPanel" />
              <Setter Property="IsVisible" Value="false" TargetName="ArrowPanel" />
              <Setter Property="IsVisible" Value="false" TargetName="Icon" />
              <Setter Property="MinWidth" Value="0" TargetName="IconColumn" />
              <Setter Property="Width" Value="0" TargetName="ArrowColumn" />
            </Trigger>
            
            
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
              <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup" />
            </Trigger>
            
            <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
              <Setter Property="Margin" Value="0" TargetName="SubMenu" />
              
            </Trigger>
            
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSubMenuOpen" Value="True" />
                <Condition Property="Role" Value="TopLevelHeader" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter Property="Opacity" Value="0" TargetName="HoverBorder" />
                <Setter Property="Background" Value="{StaticResource MenuBackgroundBrush}" TargetName="Border" />
                <Setter Property="BorderThickness" Value="0.5,0,0.5,0.5" TargetName="SubmenuMainWrapperBorder" />
                <Setter Property="BorderThickness" Value="0.5,0.5,0.5,0" TargetName="Border" />
                <Setter Property="BorderBrush" Value="{StaticResource MenuBorderBrush}" TargetName="Border" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="Gray" />
              		<Style Selector="^ /template/ TextBlock#IGTTextBlock">
			<Setter Property="Foreground" Value="Gray"/>
		</Style>

              		<Style Selector="^ /template/ ContentPresenter#HeaderHost">
			<Setter Property="Opacity" Value="0.5"/>
		</Style>

            	</Style>
	<Style Selector="^:selected">

              		<Style Selector="^ /template/ Border#HoverBorder">
			<Setter Property="Opacity" Value="1"/>
		</Style>

              		<Style Selector="^ /template/ Path#GlyphPanelpath">
			<Setter Property="Fill" Value="{StaticResource MenuBlueGlyphs}"/>
		</Style>

              		<Style Selector="^ /template/ Path#ArrowPanelPath">
			<Setter Property="Fill" Value="{StaticResource MenuBlueGlyphs}"/>
		</Style>


            	</Style>
	<Style Selector="^:checked">

              		<Style Selector="^ /template/ Grid#GlyphPanel">
			<Setter Property="IsVisible" Value="true"/>
		</Style>

              		<Style Selector="^ /template/ ContentPresenter#Icon">
			<Setter Property="IsVisible" Value="false"/>
		</Style>

            	</Style>
	<Style Selector="^:empty">

              <Setter Property="DockPanel.Dock" Value="Top" />
              <!--<Setter Property="Width" Value="16" TargetName="IconColumn" />-->
              		<Style Selector="^ /template/ Grid#ArrowPanel">
			<Setter Property="IsVisible" Value="false"/>
		</Style>

              <Setter Property="Grid.IsSharedSizeScope" Value="true" />
              		<Style Selector="^ /template/ TextBlock#IGTTextBlock">
			<Setter Property="MinWidth" Value="70"/>
		</Style>

            	</Style>
	<Style Selector="^:not(:empty)">

              <Setter Property="DockPanel.Dock" Value="Top" />
              <!--<Setter Property="Width" Value="16" TargetName="IconColumn" />-->
              <Setter Property="Grid.IsSharedSizeScope" Value="true" />
              		<Style Selector="^ /template/ TextBlock#IGTTextBlock">
			<Setter Property="MinWidth" Value="70"/>
		</Style>

            	</Style>
</ControlTheme>
  <ControlTheme x:Key="{x:Type Separator}" TargetType="{x:Type Separator}" >
    <Setter Property="Background" Value="{DynamicResource SolidBorderBrush}"/>
    <Setter Property="Margin" Value="0,0,0,0" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}" BorderThickness="0" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>
  <ControlTheme x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Type TabControl}}" >
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <LayoutTransformControl>
              <LayoutTransformControl.LayoutTransform>
	<TransformGroup>
                <ScaleTransform ScaleX="1" ScaleY="1" />
                <SkewTransform AngleX="0" AngleY="0" />
                <RotateTransform Angle="0" />
                <TranslateTransform X="0" Y="0" />
              </TransformGroup>
	</LayoutTransformControl.LayoutTransform>
            
	<Panel  Panel.ZIndex="1" KeyboardNavigation.TabIndex="1" RenderTransformOrigin="0.5,0.5"  >
            <Panel.RenderTransform>
              <TransformGroup>
                <ScaleTransform ScaleX="1" ScaleY="1" />
                <SkewTransform AngleX="0" AngleY="0" />
                <RotateTransform />
                <TranslateTransform X="0" Y="0" />
              </TransformGroup>
            </Panel.RenderTransform>
          </Panel>
	</LayoutTransformControl>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid ClipToBounds="true"  KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition  Width="0" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"  />
              <RowDefinition Height="*"  />
            </Grid.RowDefinitions>
            <Border Background="{TemplateBinding Background}" x:Name="border">
              <ItemsPresenter x:Name="HeaderPanel"/>
            </Border>
            <Border x:Name="ContentPanel" Grid.Column="0" Grid.Row="1"  KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
              <ContentPresenter  x:Name="PART_SelectedContentHost" Content="{TemplateBinding SelectedContent}"/>
            </Border>
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch"   BorderThickness="0,0,0,1" Opacity="0.5" Margin="2,0,2,0" x:Name="border1">
              <LayoutTransformControl>
                <LayoutTransformControl.LayoutTransform>
	<TransformGroup>
                  <ScaleTransform ScaleX="1" ScaleY="1"/>
                  <SkewTransform AngleX="0" AngleY="0"/>
                  <RotateTransform Angle="0"/>
                  <TranslateTransform X="0" Y="0"/>
                </TransformGroup>
	</LayoutTransformControl.LayoutTransform>
              </LayoutTransformControl>
              <Border.BorderBrush>
                <SolidColorBrush Color="{DynamicResource BlackColor}"/>
              </Border.BorderBrush>
            </Border>
          </Grid>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
              <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
              <Setter Property="Grid.Row" TargetName="border" Value="1"/>
              <Setter Property="CornerRadius" TargetName="ContentPanel" Value="2,2,0,0"/>
              <Setter Property="CornerRadius" TargetName="border" Value="0,0,2,2"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">

              <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
              <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
              <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1" />
              <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
              <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
              <Setter Property="Grid.Column" TargetName="border" Value="0"/>
              <Setter Property="Margin" TargetName="border" Value="0,0,0,0"/>
              <Setter Property="Margin" TargetName="ContentPanel" Value="0,0,0,0"/>
              <Setter Property="LayoutTransform" TargetName="border1">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform Angle="-90"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
              <Setter Property="Margin" TargetName="border1" Value="0,0,0,0"/>
              <Setter Property="CornerRadius" TargetName="border" Value="0,2,2,0"/>
              <Setter Property="CornerRadius" TargetName="ContentPanel" Value="0,2,2,0"/>

            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
              <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
              <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0" />
              <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
              <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
              <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
              <Setter Property="Grid.Column" TargetName="border" Value="1"/>
              <Setter Property="LayoutTransform" TargetName="border1">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform Angle="90"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
              <Setter Property="Grid.Column" TargetName="border1" Value="1"/>
              <Setter Property="CornerRadius" TargetName="ContentPanel" Value="2,0,0,2"/>
              <Setter Property="CornerRadius" TargetName="border" Value="0,2,2,0"/>
            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="{StaticResource GrayTextBrushKey}" />
            	</Style>
</ControlTheme>
  <ControlTheme x:Key="{x:Type TabItem}" d:IsControlPart="True" TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}" >
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
    <Setter Property="Padding" Value="8,4" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          
            
            
            
            
          
          <LayoutTransformControl>
              <LayoutTransformControl.LayoutTransform>
	<TransformGroup>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
                <SkewTransform AngleX="0" AngleY="0"/>
                <RotateTransform Angle="0"/>
                <TranslateTransform X="0" Y="0"/>
              </TransformGroup>
	</LayoutTransformControl.LayoutTransform>
            
	<Grid x:Name="grid">
            <Border x:Name="border" BorderBrush="{x:Null}" Opacity="0.5">
              <Border.Background>
                <LinearGradientBrush EndPoint="0.5,0.976" StartPoint="0.5,0.039">
                  <GradientStop Color="#7F595959" Offset="0" />
                  <GradientStop Color="#19FFFFFF" Offset="1" />
                </LinearGradientBrush>
              </Border.Background>
            </Border>
            <Border x:Name="SelectedBorder" BorderBrush="{x:Null}" Opacity="0" Background="{DynamicResource SelectedBackgroundBrush}"/>
            <Border x:Name="HoverBorder" BorderBrush="{x:Null}" Opacity="0">
              <Border.Background>
                <LinearGradientBrush EndPoint="0.5,0.976" StartPoint="0.5,0.039">
                  <GradientStop Color="#7F595959" Offset="0" />
                  <GradientStop Color="#19FFFFFF" Offset="1" />
                </LinearGradientBrush>
              </Border.Background>
            </Border>
            <Grid>
              <ContentPresenter x:Name="ContentSite" RecognizesAccessKey="True" Content="{TemplateBinding Header}" d:LayoutOverrides="Width, Height" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" />
            </Grid>
	</Grid>
	</LayoutTransformControl>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter Property="LayoutTransform" TargetName="grid">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="-90" />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter Property="LayoutTransform" TargetName="grid">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="90" />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter Property="LayoutTransform" TargetName="ContentSite">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="180" />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </Setter.Value>
              </Setter>
              <Setter Property="LayoutTransform" TargetName="grid">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform Angle="180"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
              </MultiTrigger.ExitActions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </MultiTrigger.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="Selector.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
              --><!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
              </Trigger.ExitActions> --><!--
              --><!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
              </Trigger.EnterActions> --><!--
              <Setter Property="Panel.ZIndex" Value="100" />
              <Setter Property="Foreground" Value="#0088cc" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" SourceName="grid" />
                <Condition Property="Selector.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectedBackgroundBrush}" />
              <Setter Property="Opacity" TargetName="border" Value="0.9" />
            </MultiTrigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- <ControlTheme.Triggers>
      <Trigger Property="Selector.IsSelected" Value="True">
        <Setter Property="Foreground" >
          <Setter.Value>
            <SolidColorBrush Color="{DynamicResource BlackColor}"/>
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTheme.Triggers> -->
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
              		<Style Selector="^ /template/ Border#border">
			<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
		</Style>

              		<Style Selector="^ /template/ Grid#grid">
			<Setter Property="Opacity" Value="0.3"/>
		</Style>

            	</Style>
</ControlTheme>
  <ControlTheme x:Key="NuclearSliderThumb" d:IsControlPart="True" TargetType="{x:Type Thumb}">
    
    <Setter Property="Height" Value="14" />
    <Setter Property="Width" Value="14" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          
            
            
            
            
          
          <Grid>
            <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
            <Border x:Name="HoverBorder" Opacity="0" Background="{StaticResource HoverBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
            <Border x:Name="HoverShineBorder" Opacity="0" Background="{StaticResource HoverShineBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
            <Border x:Name="PressedBorder" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{StaticResource PressedBrush}" />
            <Border x:Name="ShineBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{StaticResource ShineBrush}" Opacity="1" />
          </Grid>
          <!-- <ControlTemplate.Triggers>
            
            <Trigger Property="IsDragging" Value="True">
              --><!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
              </Trigger.ExitActions> --><!--
              --><!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
              </Trigger.EnterActions> --><!--

            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="BorderThickness" Value="1,1,1,1"/>
  	<Style Selector="^:disabled">

              		<Style Selector="^ /template/ Border#Background">
			<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
		</Style>

            	</Style>
	<Style Selector="^:pointerover">

              <!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
              </Trigger.ExitActions> -->
              <!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </Trigger.EnterActions> -->

            	</Style>
</ControlTheme>
  <ControlTheme x:Key="{x:Type Slider}" TargetType="{x:Type Slider}" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Slider}">
          <Grid x:Name="GridRoot" Focusable="False">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto"  />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar IsVisible="false" x:Name="TopTick" Height="4"  Placement="Top" Fill="{DynamicResource GlyphBrush}" />
            <Border Grid.Row="1" Margin="0" x:Name="Border" Height="4" Background="{DynamicResource DropdownButtonBackgroundBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" />
            <Track Grid.Row="1" x:Name="PART_Track" Value="{TemplateBinding Value, Mode=TwoWay}">
              <Track.Thumb>
                <Thumb Theme="{DynamicResource NuclearSliderThumb}" Background="{DynamicResource NormalBrush}" Foreground="{x:Null}" Width="10" Height="{TemplateBinding Height}"/>
              </Track.Thumb>
              <Track.IncreaseButton>
                <RepeatButton Theme="{DynamicResource ScrollBarArrowRepeatButtonStyle}"  />
              </Track.IncreaseButton>
              <Track.DecreaseButton>
                <RepeatButton Theme="{DynamicResource ScrollBarArrowRepeatButtonStyle}"  />
              </Track.DecreaseButton>
            </Track>
            <TickBar IsVisible="false" Grid.Row="2" x:Name="BottomTick" Height="4"  Placement="Bottom" Fill="{TemplateBinding Foreground}" />
          </Grid>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
              <Setter Property="IsVisible" TargetName="TopTick" Value="true" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
              <Setter Property="IsVisible" TargetName="BottomTick" Value="true" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
              <Setter Property="IsVisible" TargetName="TopTick" Value="true" />
              <Setter Property="IsVisible" TargetName="BottomTick" Value="true" />
            </Trigger>
            
            <Trigger Property="Orientation" Value="Vertical">
              <Setter Property="LayoutTransform" TargetName="GridRoot">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal" />
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              		<Style Selector="^ /template/ Border#Border">
			<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
		</Style>

              		<Style Selector="^ /template/ Border#Border">
			<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}"/>
		</Style>

            	</Style>
</ControlTheme>
  <ControlTheme x:Key="{x:Type TreeView}" TargetType="{x:Type TreeView}" >
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Grid>
            <Border x:Name="Border" Background="{DynamicResource ControlBackgroundBrush}" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0">
              <ScrollViewer Theme="{DynamicResource NuclearScrollViewer}" Focusable="False" Padding="4" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"  Foreground="{StaticResource ActiveCaptionTextBrushKey}">
                <ItemsPresenter />
              </ScrollViewer>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTemplate x:Key="PropertyGridHeaderExpanderToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid Background="Transparent">
      <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{StaticResource GlyphHeaderBrush}"
                  Data="M 0 6 V 0 l 5 3 z" RenderTransformOrigin="0.5,0.5" Stretch="Uniform" StrokeThickness="0"/>
      <Path IsVisible="false" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{StaticResource GlyphHeaderBrush}"
                  Data="M 0 0 H 6 L 3 6 Z" RenderTransformOrigin="0.5,0.5" Stretch="Uniform" StrokeThickness="0"/>
    </Grid>
    <!-- <ControlTemplate.Triggers>
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:checked">

        		<Style Selector="^ /template/ Path#Up_Arrow">
			<Setter Property="IsVisible" Value="false"/>
		</Style>

        		<Style Selector="^ /template/ Path#Down_Arrow">
			<Setter Property="IsVisible" Value="true"/>
		</Style>

      	</Style>
--></ControlTemplate>

  <ControlTemplate x:Key="TreeExpanderToggleButton" TargetType="{x:Type ToggleButton}">
<Grid Background="Transparent">
<Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="M 0 6 V 0 l 5 3 z" RenderTransformOrigin="0.5,0.5" Stretch="Uniform" StrokeThickness="0" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
<Path HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="M 0 0 H 6 L 3 6 Z" RenderTransformOrigin="0.5,0.5" Stretch="Uniform" StrokeThickness="0" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
    </Grid>
    <!-- <ControlTemplate.Triggers>
      
      <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:TreeViewItem}}, Mode=OneWay}" Value="True">
        <Setter Property="Fill" Value="{StaticResource GlyphHeaderBrush}" TargetName="Up_Arrow"/>
        <Setter Property="Fill" Value="{StaticResource GlyphHeaderBrush}" TargetName="Down_Arrow"/>
      </DataTrigger>
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:checked">

        		<Style Selector="^ /template/ Path#Up_Arrow">
			<Setter Property="IsVisible" Value="false"/>
		</Style>

        		<Style Selector="^ /template/ Path#Down_Arrow">
			<Setter Property="IsVisible" Value="true"/>
		</Style>

      	</Style>
--></ControlTemplate>

  <ControlTheme x:Key="NuclearTreeViewItemToggleButton" d:IsControlPart="True" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template" Value="{StaticResource TreeExpanderToggleButton}"/>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type TreeViewItem}" d:IsControlPart="True" TargetType="{x:Type TreeViewItem}" >
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="HorizontalAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding" Value="1,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          
            
            
            
            
          
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="19" Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Expander" Theme="{DynamicResource NuclearTreeViewItemToggleButton}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" BorderBrush="{x:Null}" Foreground="{x:Null}" Background="{x:Null}" />
            <Border Grid.Column="1" x:Name="Selection_Border" BorderThickness="1,1,1,1" CornerRadius="3,3,3,3">
              <Grid  >
                <Border x:Name="MainBorder" Opacity="0.25" Background="{DynamicResource NormalBrush}" CornerRadius="2,2,2,2"/>
                <Border x:Name="SelectionBorder" Opacity="0" Background="{DynamicResource SelectedBackgroundBrush}" CornerRadius="2,2,2,2"/>
                <Border x:Name="HoverBorder" Opacity="0" Background="{DynamicResource NormalBrush}" CornerRadius="2,2,2,2"/>
                <ContentPresenter x:Name="PART_Header" Content="{TemplateBinding Header}" d:LayoutOverrides="Width"  Margin="2,0,2,0" />
              </Grid>
            </Border>
            <ItemsPresenter Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1" x:Name="ItemsHost" />
          </Grid>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
              <Setter Property="IsVisible" Value="false" TargetName="ItemsHost" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
              <Setter Property="IsVisible" Value="false" TargetName="Expander" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              --><!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOn_BeginStoryboard1"/>
              </Trigger.ExitActions> --><!--
              --><!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
              </Trigger.EnterActions> --><!--
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="true" />
                <Condition Property="IsSelectionActive" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{StaticResource ControlTextBrushKey}" />
              <Setter Property="Background" TargetName="Selection_Border" Value="{DynamicResource SelectedBackgroundBrush}" />
              <Setter Property="Opacity" TargetName="Selection_Border" Value="0.5" />
              <Setter Property="BorderBrush" TargetName="Selection_Border" Value="{DynamicResource NormalBorderBrush}" />
            </MultiTrigger>
            
            <MultiDataTrigger>
              <MultiDataTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
              </MultiDataTrigger.ExitActions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </MultiDataTrigger.EnterActions>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, ElementName=Selection_Border}" Value="True" />
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
              </MultiDataTrigger.Conditions>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                <Condition Binding="{Binding IsMouseOver, ElementName=Selection_Border}" Value="true" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" TargetName="Selection_Border" Value="{DynamicResource SelectedBackgroundBrush}" />
              <Setter Property="Opacity" TargetName="Selection_Border" Value="0.8" />
              <Setter Property="BorderBrush" TargetName="Selection_Border" Value="{DynamicResource NormalBorderBrush}" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="Transparent"/>
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="{StaticResource GrayTextBrushKey}" />
            	</Style>
</ControlTheme>

  

  <ControlTheme x:Key="OldToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    
    <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
    <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          
            
            
            
            
            
            
          
          <Grid x:Name="grid">

            <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" />
            <Border x:Name="CheckedBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource SelectedBackgroundBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" />
            <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" Background="{DynamicResource HoverBrush}" />
            <Border x:Name="HoverShineBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" Background="{DynamicResource HoverShineBrush}" />
            <Border x:Name="Pressed" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource PressedBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" Background="{DynamicResource PressedBrush}" />
            <Rectangle Opacity="1" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch"  x:Name="Shine">
              <Rectangle.Fill>
                <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                  <GradientStop Color="#26FFFFFF" Offset="0" />
                  <GradientStop Color="#00FFFFFF" Offset="1" />
                  <GradientStop Color="#26FFFFFF" Offset="0.467" />
                  <GradientStop Color="#00FFFFFF" Offset="0.475" />
                </LinearGradientBrush>
              </Rectangle.Fill>
            </Rectangle>

            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"  RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />
          </Grid>

          <!-- <ControlTemplate.Triggers>
            
            <Trigger Property="IsPressed" Value="True">
              --><!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
              </Trigger.ExitActions> --><!--
              --><!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
              </Trigger.EnterActions> --><!--
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true"/>
            <Trigger Property="IsChecked" Value="true">
              --><!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource CheckedOff}" x:Name="CheckedOff_BeginStoryboard"/>
              </Trigger.ExitActions> --><!--
              --><!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource CheckedOn}" x:Name="CheckedOn_BeginStoryboard"/>
              </Trigger.EnterActions> --><!--
            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- <ControlTheme.Triggers>
      
    </ControlTheme.Triggers> -->
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="#ADADAD" />
              		<Style Selector="^ /template/ Border#Border">
			<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
		</Style>

              		<Style Selector="^ /template/ Border#Border">
			<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}"/>
		</Style>

              		<Style Selector="^ /template/ Grid#grid">
			<Setter Property="Opacity" Value="0.5"/>
		</Style>

            	</Style>
	<Style Selector="^:pointerover">

              <!-- <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
              </Trigger.ExitActions> -->
              <!-- <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </Trigger.EnterActions> -->
            	</Style>
	<Style Selector="^:checked">

        <Setter Property="Foreground">
          <Setter.Value>
            <SolidColorBrush Color="{DynamicResource BlackColor}" />
          </Setter.Value>
        </Setter>
      	</Style>
</ControlTheme>

  

  

  
  
  

  

  <ControlTheme x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
    <Setter Property="Canvas.Right" Value="-8.5" />
    <Setter Property="Width" Value="18" />
    <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Padding" Value="0,3,0,4" />
    <Setter Property="Background" Value="{DynamicResource DropdownButtonBackgroundBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Padding}" Background="Transparent" Width="4">
            <Rectangle HorizontalAlignment="Center" Width="0.5">
              <Rectangle.Fill>
                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
              </Rectangle.Fill>
            </Rectangle>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  

  <!--  TOOLBARS  -->
  <ControlTheme x:Key="ItemsControlButtonStyleKey" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Template" Value="{DynamicResource ButtonTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Margin" Value="2,0,2,0"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="MinHeight" Value="20"/>
    <Setter Property="MinWidth" Value="20"/>
    <!-- <ControlTheme.Triggers>
      
    </ControlTheme.Triggers> -->
  	<Style Selector="^:pointerover">

        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHoverBackground}"/>
      	</Style>
</ControlTheme>

  <ControlTheme x:Key="ItemsControl.CheckBoxStyleKey" TargetType="{x:Type CheckBox}">
    
    
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Template" Value="{DynamicResource CheckBoxTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Margin" Value="2,0,2,0"/>
  </ControlTheme>

  <ControlTheme x:Key="ItemsControl.RadioButtonStyleKey" TargetType="{x:Type RadioButton}">
    
    
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Template" Value="{DynamicResource RadioButtonTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Margin" Value="2,0,2,0"/>
    <!-- <ControlTheme.Triggers>
      
    </ControlTheme.Triggers> -->
  	<Style Selector="^:disabled">

        <Setter Property="Foreground">
          <Setter.Value>
            <SolidColorBrush Color="{DynamicResource TopGradientSelectColor}" />
          </Setter.Value>
        </Setter>
      	</Style>
</ControlTheme>

  <ControlTheme x:Key="ItemsControl.ToggleButtonStyleKey" TargetType="{x:Type ToggleButton}"
         BasedOn="{StaticResource {x:Type ToggleButton}}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Margin" Value="2,0,2,0"/>
    <Setter Property="MinHeight" Value="20"/>
    <Setter Property="MinWidth" Value="20"/>
    <!-- <ControlTheme.Triggers>
      
      
    </ControlTheme.Triggers> -->
  	<Style Selector="^:checked">

        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonPressedBackground}"/>
      	</Style>
	<Style Selector="^:pointerover">

        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHoverBackground}"/>
      	</Style>
</ControlTheme>

  <ControlTheme x:Key="ItemsControl.ComboBoxStyleKey" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
    
    <Setter Property="Background" Value="{DynamicResource ComboBoxBackground}"/>
    <Setter Property="Template" Value="{DynamicResource ComboBoxTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
  </ControlTheme>

  <ControlTheme x:Key="ItemsControl.MenuStyleKey" TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}">
    <Setter Property="VerticalAlignment" Value="Center" />
  </ControlTheme>

  <ControlTheme x:Key="ItemsControl.TextBoxStyleKey" TargetType="{x:Type TextBox}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    
    
    <Setter Property="Template" Value="{DynamicResource TextBoxTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
    <Setter Property="BorderBrush" Value="#FF000000"/>
  </ControlTheme>

  <ControlTheme x:Key="ItemsControl.SeparatorStyleKey" TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Width" Value="1"/>
    <Setter Property="Margin" Value="6,2,6,2"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}" BorderThickness="0" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <LinearGradientBrush x:Key="ToolBarHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFFFFF" Offset="0"/>
    <GradientStop Color="#FFFBFF" Offset="0.5"/>
    <GradientStop Color="#F7F7F7" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#ECECEC" Offset="0"/>
    <GradientStop Color="#DDDDDD" Offset="0.5"/>
    <GradientStop Color="#A0A0A0" Offset="1"/>
  </LinearGradientBrush>
  <ControlTheme x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border  x:Name="Bd" CornerRadius="0,0,0,0" Background="{DynamicResource DropdownButtonBackgroundBrush}">
            <Canvas  HorizontalAlignment="Right" Margin="7,2,2,2" VerticalAlignment="Bottom" Width="6" Height="7">
              <Path Stroke="#FF5C5C5C" Data="M 1 1.5 L 6 1.5"/>
              <Path Stroke="{TemplateBinding Foreground}" Data="M 0 0.5 L 5 0.5"/>
              <Path Fill="#FF5C5C5C" Data="M 0.5 4 L 6.5 4 L 3.5 7 Z"/>
              <Path Fill="{TemplateBinding Foreground}" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"/>
            </Canvas>
          </Border>
          <!-- <ControlTemplate.Triggers>
            
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
            	</Style>
	<Style Selector="^:pointerover">

              		<Style Selector="^ /template/ Border#Bd">
			<Setter Property="Background" Value="{DynamicResource MouseOverBrush}"/>
		</Style>

            	</Style>
</ControlTheme>
  <ControlTheme x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border  Background="Transparent" Padding="{TemplateBinding Padding}" CornerRadius="0,0,0,0">
            <Rectangle>
              <Rectangle.Fill>
                <DrawingBrush TileMode="Tile"    >
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Rectangle.Fill>
            </Rectangle>
          </Border>
          <!-- <ControlTemplate.Triggers>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:pointerover">

              <Setter Property="Cursor" Value="SizeAll"/>
            	</Style>
</ControlTheme>
  <LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#ECECEC" Offset="0"/>
    <GradientStop Color="#DDDDDD" Offset="0.5"/>
    <GradientStop Color="#A0A0A0" Offset="1"/>
  </LinearGradientBrush>
  <ControlTheme x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border  x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,0,3,3">
            <Canvas  HorizontalAlignment="Right" Margin="2,7,2,2" VerticalAlignment="Bottom" Width="7" Height="6">
              <Path Stroke="White" Data="M 1.5 1 L 1.5 6"/>
              <Path Stroke="{TemplateBinding Foreground}" Data="M 0.5 0 L 0.5 5"/>
              <Path Fill="White" Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z"/>
              <Path Fill="{TemplateBinding Foreground}" Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z"/>
            </Canvas>
          </Border>
          <!-- <ControlTemplate.Triggers>
            
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
            	</Style>
	<Style Selector="^:pointerover">

              		<Style Selector="^ /template/ Border#Bd">
			<Setter Property="Background" Value="{StaticResource ToolBarButtonHover}"/>
		</Style>

            	</Style>
</ControlTheme>
  <LinearGradientBrush x:Key="ToolBarVerticalBackground" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#FFFFFF" Offset="0"/>
    <GradientStop Color="#FFFBFF" Offset="0.5"/>
    <GradientStop Color="#F7F7F7" Offset="1"/>
  </LinearGradientBrush>
  
  <ControlTheme x:Key="TagToolBarStyle" TargetType="{x:Type ItemsControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ItemsControl}">
          <DockPanel >
            <Grid DockPanel.Dock="Right" x:Name="OverflowGrid">
              
              <Border VerticalAlignment="Bottom" HorizontalAlignment="Right" x:Name="PopupPlacementTarget"/>
              <Popup Focusable="false"  IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Left" PlacementTarget="{Binding ElementName=PopupPlacementTarget}" IsLightDismissEnabled="False" >
                <Border BorderThickness="1,1,1,1" Background="{DynamicResource DropdownButtonBackgroundBrush}" BorderBrush="{DynamicResource DropdownButtonBackgroundBrush}">
                  
                </Border>
              </Popup>
            </Grid>
            <Border Margin="0,0,2,0" x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
              
            </Border>
          </DockPanel>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="HasOverflowItems" Value="False">
              <Setter Property="Margin" TargetName="MainPanelBorder" Value="0"/>
            </Trigger>
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="{StaticResource GrayTextBrushKey}"/>
            	</Style>
</ControlTheme>
  <ControlTemplate x:Key="PropertyGridExpander" TargetType="{x:Type ToggleButton}">
    <Grid  Background="Transparent" Focusable="False">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="14" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="#FFD1D1D1" Data="M2,0L2,6 8,3z" Focusable="False"/>
      <Path IsVisible="false" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Data="M0,0L3,6 6,0z" Fill="#FFD1D1D1" Focusable="False"/>
      <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"  HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" Focusable="False"/>
    </Grid>
    <!-- <ControlTemplate.Triggers>
      
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:pointerover">

        		<Style Selector="^ /template/ Path#Up_Arrow">
			<Setter Property="Fill" Value="White"/>
		</Style>

        		<Style Selector="^ /template/ Path#Down_Arrow">
			<Setter Property="Fill" Value="White"/>
		</Style>

      	</Style>
	<Style Selector="^:checked">

        		<Style Selector="^ /template/ Path#Down_Arrow">
			<Setter Property="IsVisible" Value="true"/>
		</Style>

        		<Style Selector="^ /template/ Path#Up_Arrow">
			<Setter Property="IsVisible" Value="false"/>
		</Style>

      	</Style>
--></ControlTemplate>

  <ControlTemplate x:Key="ExpanderTemplate" TargetType="{x:Type Expander}">
    <Border  BorderThickness="1" CornerRadius="3" Margin="0,1" Background="{TemplateBinding Background}" Focusable="False" BorderBrush="{TemplateBinding BorderBrush}">
      <DockPanel x:Name="dockPanel" Focusable="False">
        <ToggleButton
                    FontFamily="{TemplateBinding FontFamily}"
                    FontSize="{TemplateBinding FontSize}"
                    FontStretch="{TemplateBinding FontStretch}"
                    FontStyle="{TemplateBinding FontStyle}"
                    FontWeight="{TemplateBinding FontWeight}"
                    Foreground="{TemplateBinding Foreground}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Padding="{TemplateBinding Padding}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    
                    Margin="1,1,1,0"
                    MinHeight="0"
                    MinWidth="0"
                    x:Name="HeaderSite"
                    Theme="{StaticResource ExpanderDownHeaderStyle}"
                    Content="{TemplateBinding Header}"
                    ContentTemplate="{TemplateBinding HeaderTemplate}"
                    
                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Top"
                    Background="{x:Null}"
                    BorderBrush="{x:Null}"
                    BorderThickness="0" />
	<!-- <ToggleButton
                    FontFamily="{TemplateBinding FontFamily}"
                    FontSize="{TemplateBinding FontSize}"
                    FontStretch="{TemplateBinding FontStretch}"
                    FontStyle="{TemplateBinding FontStyle}"
                    FontWeight="{TemplateBinding FontWeight}"
                    Foreground="{TemplateBinding Foreground}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Padding="{TemplateBinding Padding}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    
                    Margin="1,1,1,0"
                    MinHeight="0"
                    MinWidth="0"
                    x:Name="HeaderSite"
                    Theme="{StaticResource ExpanderDownHeaderStyle}"
                    Content="{TemplateBinding Header}"
                    ContentTemplate="{TemplateBinding HeaderTemplate}"
                    ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Top"
                    Background="{x:Null}"
                    BorderBrush="{x:Null}"
                    BorderThickness="0" /> -->
        <Border IsVisible="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"  BorderThickness="1,0,1,1" x:Name="border" Margin="1,1,1,1" Focusable="False">
          <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,1,1" x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Bottom" />
        </Border>
      </DockPanel>
    </Border>
    <!-- <ControlTemplate.Triggers>
      <Trigger Property="IsExpanded" Value="true">
        <Setter Property="IsVisible" TargetName="border" Value="true" />
      </Trigger>
      <Trigger Property="ExpandDirection" Value="Right">
        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right" />
        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left" />
        <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}" />
      </Trigger>
      <Trigger Property="ExpandDirection" Value="Up">
        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
        <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}" />
      </Trigger>
      <Trigger Property="ExpandDirection" Value="Left">
        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
        <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}" />
      </Trigger>
      
    </ControlTemplate.Triggers> -->
  <!--	<Style Selector="^:disabled">

        <Setter Property="Foreground" Value="{StaticResource GrayTextBrushKey}" />
      	</Style>
--></ControlTemplate>
  

  

  <SolidColorBrush x:Key="TagBackgroundBrush" Color="#FF708090"/>
  <ControlTheme x:Key="{x:Type ctrl:TagControl}" TargetType="{x:Type ctrl:TagControl}" >
    <Setter Property="Background" Value="{StaticResource TagBackgroundBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:TagControl}">
          <DockPanel Background="{x:Null}">
            <Border DockPanel.Dock="Left" Margin="0,0,-2,0">
              <Path Stretch="Uniform" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding Background}" StrokeThickness="4" StrokeJoin="Round"
                    Data="F1 M 35,25L 46,14L 46,53L 35,42L 35,25 Z " />
            </Border>
            <Border Background="{TemplateBinding Background}" CornerRadius="0,3,3,0">
              <DockPanel>
                <Button DockPanel.Dock="Right" Background="Transparent" Width="12" Height="12" Margin="2"
                        Command="{Binding CloseTagCommand, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TagControl}}}"
                        CommandParameter="{Binding}"
                        IsVisible="{Binding CloseTagCommand.IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TagControl}}}">
                  <Path Width="8" Height="8" Stretch="Fill" Fill="{DynamicResource TextBrush}"
                        Data="F1 M 26.9166,22.1667L 37.9999,33.25L 49.0832,22.1668L 53.8332,26.9168L 42.7499,38L 53.8332,49.0834L 49.0833,53.8334L 37.9999,42.75L 26.9166,53.8334L 22.1666,49.0833L 33.25,38L 22.1667,26.9167L 26.9166,22.1667 Z "/>
                </Button>
                <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}" 
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
	<!-- <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" /> -->

              </DockPanel>
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type GridSplitter}" TargetType="{x:Type GridSplitter}" >
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="HorizontalAlignment" Value="Stretch"/>
    <Setter Property="VerticalAlignment" Value="Stretch"/>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:CanvasView}" TargetType="{x:Type ctrl:CanvasView}" >
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:CanvasView}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid x:Name="PART_Grid" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:TrackerControl}" TargetType="{x:Type ctrl:TrackerControl}" >
    <Setter Property="LineStroke" Value="LightGray" />
    <Setter Property="LineThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:TrackerControl}">
          <Canvas HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsHitTestVisible="False">
            <Line x:Name="PART_HorizontalLine" IsVisible="{TemplateBinding HorizontalLineVisibility}"
                  Stroke="{TemplateBinding LineStroke}" StrokeThickness="{TemplateBinding LineThickness}" RenderOptions.EdgeMode="Aliased" />
            <Line x:Name="PART_VerticalLine" IsVisible="{TemplateBinding VerticalLineVisibility}"
                  Stroke="{TemplateBinding LineStroke}" StrokeThickness="{TemplateBinding LineThickness}" RenderOptions.EdgeMode="Aliased" />
            <!--<ContentPresenter />-->
          </Canvas>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme TargetType="{x:Type Rectangle}" x:Key="{x:Static behaviors:SelectionRectangleBehavior.DefaultRectangleStyleKey}">
    <Setter Property="Fill" Value="LightBlue" />
    <Setter Property="Opacity" Value="0.5" />
    <Setter Property="Stroke" Value="Blue" />
    <Setter Property="StrokeJoin" Value="Round" />
    <Setter Property="StrokeThickness" Value="1" />
  </ControlTheme>

  <!--  EDITORS  -->
  <ControlTheme x:Key="{x:Static ctrl:VectorEditorResources.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}" >
    <Setter Property="ToolTip.Tip" Value="{sd:Localize Toggle editing mode, Context=ToolTip}" />
    <!-- <ControlTheme.Triggers>
      
      
      <Trigger Property="IsChecked" Value="{x:Null}">
        <Setter Property="Content" Value="{me:Image {StaticResource ImageLength}, 16, 16, LowQuality}" />
      </Trigger>
    </ControlTheme.Triggers> -->
  	<Style Selector="^:checked">

        <Setter Property="Content" Value="{me:Image {StaticResource ImageLocked}, 16, 16, LowQuality}" />
      	</Style>
	<Style Selector="^:not(:checked)">

        <Setter Property="Content" Value="{me:Image {StaticResource ImageUnlocked}, 16, 16, LowQuality}" />
      	</Style>
</ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:Vector2Editor}" TargetType="ctrl:Vector2Editor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:Vector2Editor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <!-- HACK: In the cvt:Chained converter, Parameter1 should be ctrl:VectorEditingMode.Length, but for some reason it doesn't compile. So we convert it first to an int. -->
            <Border Grid.Column="1" Grid.ColumnSpan="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource LengthBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:IsEqual}, ConverterParameter={me:Int {x:Static ctrl:VectorEditingMode.Length}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="L" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Length, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="1" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource RedBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:Chained {cvt:IsEqual}, {cvt:InvertBool}, Parameter1={me:Int {x:Static ctrl:VectorEditingMode.Length}}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="X" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding X, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource GreenBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:Chained {cvt:IsEqual}, {cvt:InvertBool}, Parameter1={me:Int {x:Static ctrl:VectorEditingMode.Length}}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="Y" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Y, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <!-- TODO: fix this button (need to be re-implemented differently, view-model side -->
            <!--<ToggleButton x:Name="PART_ToggleButton" Grid.Column="4" Margin="2,0,0,0" Padding="0" Width="16" Height="16" Background="Transparent"
                          ClickMode="Release" IsThreeState="True"
                          IsChecked="{Binding EditingMode, Converter={cvt:VectorEditingModeToBool}, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"/>-->
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:Vector3Editor}" TargetType="ctrl:Vector3Editor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:Vector3Editor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <!-- HACK: In the cvt:Chained converter, Parameter1 should be ctrl:VectorEditingMode.Length, but for some reason it doesn't compile. So we convert it first to an int. -->
            <Border Grid.Column="1" Grid.ColumnSpan="5" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource LengthBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:IsEqual}, ConverterParameter={me:Int {x:Static ctrl:VectorEditingMode.Length}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="L" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Length, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="1" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource RedBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:Chained {cvt:IsEqual}, {cvt:InvertBool}, Parameter1={me:Int {x:Static ctrl:VectorEditingMode.Length}}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="X" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding X, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource GreenBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:Chained {cvt:IsEqual}, {cvt:InvertBool}, Parameter1={me:Int {x:Static ctrl:VectorEditingMode.Length}}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="Y" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Y, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="5" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource BlueBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:Chained {cvt:IsEqual}, {cvt:InvertBool}, Parameter1={me:Int {x:Static ctrl:VectorEditingMode.Length}}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="Z" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Z, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <!-- TODO: fix this button (need to be re-implemented differently, view-model side -->
            <!--<ToggleButton x:Name="PART_ToggleButton" Grid.Column="6" Margin="2,0,0,0" Padding="0" Width="16" Height="16" Background="Transparent"
                          ClickMode="Release" IsThreeState="True"
                          IsChecked="{Binding EditingMode, Converter={cvt:VectorEditingModeToBool}, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"/>-->
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:Vector4Editor}" TargetType="ctrl:Vector4Editor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:Vector4Editor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <!-- HACK: In the cvt:Chained converter, Parameter1 should be ctrl:VectorEditingMode.Length, but for some reason it doesn't compile. So we convert it first to an int. -->
            <Border Grid.Column="1" Grid.ColumnSpan="7" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource LengthBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:IsEqual}, ConverterParameter={me:Int {x:Static ctrl:VectorEditingMode.Length}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="L" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Length, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="1" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource RedBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:Chained {cvt:IsEqual}, {cvt:InvertBool}, Parameter1={me:Int {x:Static ctrl:VectorEditingMode.Length}}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="X" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding X, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource GreenBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:Chained {cvt:IsEqual}, {cvt:InvertBool}, Parameter1={me:Int {x:Static ctrl:VectorEditingMode.Length}}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="Y" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Y, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="5" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource BlueBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:Chained {cvt:IsEqual}, {cvt:InvertBool}, Parameter1={me:Int {x:Static ctrl:VectorEditingMode.Length}}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="Z" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Z, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

              </DockPanel>
            </Border>
            <Border Grid.Column="7" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent"
                    IsVisible="{Binding EditingMode, Converter={cvt:Chained {cvt:IsEqual}, {cvt:InvertBool}, Parameter1={me:Int {x:Static ctrl:VectorEditingMode.Length}}}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <DockPanel>
                <TextBlock Text="W" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding W, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <!-- TODO: fix this button (need to be re-implemented differently, view-model side -->
            <!--<ToggleButton x:Name="PART_ToggleButton" Grid.Column="8" Margin="2,0,0,0" Padding="0" Width="16" Height="16" Background="Transparent"
                          ClickMode="Release" IsThreeState="True"
                          IsChecked="{Binding EditingMode, Converter={cvt:VectorEditingModeToBool}, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"/>-->
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:Int2Editor}" TargetType="ctrl:Int2Editor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:Int2Editor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="1" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource RedBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="X" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding X, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource GreenBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="Y" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Y, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <ToggleButton Grid.Column="4" Margin="2,0,0,0" x:Name="ToggleButtonAdvancedOptions" Width="16" Height="16" Background="Transparent" ToolTip.Tip="{sd:Localize Advanced options, Context=ToolTip}"
                                      ClickMode="Press" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <Image Width="16" Height="16" Margin="-1" Source="{Binding Source={StaticResource ImageAdvancedEditionVector}, Path=Source}" RenderOptions.BitmapInterpolationMode="LowQuality"/>
            </ToggleButton>
            <Popup x:Name="PART_Popup" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" 
                                       MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=ctrl:Int2Editor}}" IsLightDismissEnabled="True"
                                       PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType=ctrl:Int2Editor}}" >
              <Border  Background="{StaticResource BackgroundBrush}" BorderBrush="Black" BorderThickness="1">
                <ctrl:KeyValueGrid>
                  <TextBlock Text="{sd:Localize All components:}" Margin="4,0" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                  <ctrl:NumericTextBox x:Name="AllTextBox" Margin="2,2,6,6" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True" ValidateOnLostFocus="False">
                    <i:Interaction.Behaviors>
                      <behaviors:OnEventCommandBehavior EventName="Validated" Command="{x:Static commands:ControlCommands.SetAllVectorComponentsCommand}" CommandParameter="{Binding Value, ElementName=AllTextBox}"/>
                      <behaviors:OnEventCommandBehavior EventName="Validated" Command="{Binding ResetValueCommand, ElementName=AllTextBox}"/>
                    </i:Interaction.Behaviors>
                  </ctrl:NumericTextBox>
                  <Rectangle Width="0" Height="0" IsVisible="false"/>
                  <Button Command="{x:Static commands:ControlCommands.ResetValueCommand}" Content="Reset value" Margin="2,2,6,6"/>
                </ctrl:KeyValueGrid>
              </Border>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:Int3Editor}" TargetType="ctrl:Int3Editor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:Int3Editor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="1" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource RedBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="X" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding X, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource GreenBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="Y" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Y, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="5" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource BlueBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="Z" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Z, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <ToggleButton Grid.Column="6" Margin="2,0,0,0" x:Name="ToggleButtonAdvancedOptions" Width="16" Height="16"
                                      Background="Transparent" ToolTip.Tip="{sd:Localize Advanced options, Context=ToolTip}" ClickMode="Press" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <Image Width="16" Height="16" Margin="-1" Source="{Binding Source={StaticResource ImageAdvancedEditionVector}, Path=Source}" RenderOptions.BitmapInterpolationMode="LowQuality"/>
            </ToggleButton>
            <Popup x:Name="PART_Popup" Placement="Bottom"  IsOpen="{TemplateBinding IsDropDownOpen}"
                                       MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=ctrl:Int3Editor}}" IsLightDismissEnabled="True"
                                       PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType=ctrl:Int3Editor}}" >
              <Border  Background="{StaticResource BackgroundBrush}" BorderBrush="Black" BorderThickness="1">
                <ctrl:KeyValueGrid>
                  <TextBlock Text="{sd:Localize All components:}" Margin="4,0" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                  <ctrl:NumericTextBox x:Name="AllTextBox" Margin="2,2,6,6" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True" ValidateOnLostFocus="False">
                    <i:Interaction.Behaviors>
                      <behaviors:OnEventCommandBehavior EventName="Validated" Command="{x:Static commands:ControlCommands.SetAllVectorComponentsCommand}" CommandParameter="{Binding Value, ElementName=AllTextBox}"/>
                      <behaviors:OnEventCommandBehavior EventName="Validated" Command="{Binding ResetValueCommand, ElementName=AllTextBox}"/>
                    </i:Interaction.Behaviors>
                  </ctrl:NumericTextBox>
                  <Rectangle Width="0" Height="0" IsVisible="false"/>
                  <Button Command="{x:Static commands:ControlCommands.ResetValueCommand}" Content="Reset value" Margin="2,2,6,6"/>
                </ctrl:KeyValueGrid>
              </Border>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:Int4Editor}" TargetType="ctrl:Int4Editor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:Int4Editor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="1" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource RedBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="X" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding X, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource GreenBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="Y" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Y, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="5" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource BlueBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="Z" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Z, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="7" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="W" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding W, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <ToggleButton Grid.Column="8" Margin="2,0,0,0" x:Name="ToggleButtonAdvancedOptions" Width="16" Height="16" Background="Transparent" ToolTip.Tip="{sd:Localize Advanced options, Context=ToolTip}"
                                      ClickMode="Press" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <Image Width="16" Height="16" Margin="-1" Source="{Binding Source={StaticResource ImageAdvancedEditionVector}, Path=Source}" RenderOptions.BitmapInterpolationMode="LowQuality"/>
            </ToggleButton>
            <Popup x:Name="PART_Popup" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" 
                                       MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=ctrl:Int4Editor}}" IsLightDismissEnabled="True"
                                       PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType=ctrl:Int4Editor}}" >
              <Border  Background="{StaticResource BackgroundBrush}" BorderBrush="Black" BorderThickness="1">
                <ctrl:KeyValueGrid>
                  <TextBlock Text="{sd:Localize All components:}" Margin="4,0" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                  <ctrl:NumericTextBox x:Name="AllTextBox" Margin="2,2,6,6" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True" ValidateOnLostFocus="False">
                    <i:Interaction.Behaviors>
                      <behaviors:OnEventCommandBehavior EventName="Validated" Command="{x:Static commands:ControlCommands.SetAllVectorComponentsCommand}" CommandParameter="{Binding Value, ElementName=AllTextBox}"/>
                      <behaviors:OnEventCommandBehavior EventName="Validated" Command="{Binding ResetValueCommand, ElementName=AllTextBox}"/>
                    </i:Interaction.Behaviors>
                  </ctrl:NumericTextBox>
                  <Rectangle Width="0" Height="0" IsVisible="false"/>
                  <Button Command="{x:Static commands:ControlCommands.ResetValueCommand}" Content="Reset value" Margin="2,2,6,6"/>
                </ctrl:KeyValueGrid>
              </Border>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:RectangleFEditor}" TargetType="ctrl:RectangleFEditor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:RectangleFEditor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="1" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="X" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding RectX, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

              </DockPanel>
            </Border>
            <Border Grid.Column="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="Y" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding RectY, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="5" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="W" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding RectWidth, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="7" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="H" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding RectHeight, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:RectangleEditor}" TargetType="ctrl:RectangleEditor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:RectangleEditor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="1" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="X" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding RectX, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="Y" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding RectY, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="5" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="W" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding RectWidth, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="7" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource AlphaBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="H" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding RectHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DecimalPlaces="0" DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:RotationEditor}" TargetType="ctrl:RotationEditor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:RotationEditor">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="1" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource RedBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="X" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding X, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="3" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource GreenBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="Y" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Y, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <Border Grid.Column="5" CornerRadius="4" Margin="2,0,0,0" Background="{StaticResource BlueBrush}" BorderThickness="1" BorderBrush="Transparent">
              <DockPanel>
                <TextBlock Text="Z" Margin="3,0" MinWidth="12" VerticalAlignment="Center" TextAlignment="Center" Foreground="White"/>
                <ctrl:NumericTextBox Value="{Binding Z, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                     DecimalPlaces="{Binding DecimalPlaces, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     DisplayUpDownButtons="False" SelectAllOnFocus="True" Margin="-1" TextAlignment="Center"
                                     WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
              </DockPanel>
            </Border>
            <!-- TODO: this button is disabled to match the vector editor in term of style, remove it completely if the button are not restored -->
            <!--<Button Grid.Column="6" Margin="2,0,0,0" x:Name="ResetButton" Width="16" Height="16" Background="Transparent"
                    Command="{x:Static commands:ControlCommands.ResetValueCommand}" ToolTip.Tip="{sd:Localize Reset value, Context=ToolTip}">
              <Image Width="16" Height="16" Margin="-1" Source="{Binding Source={StaticResource ImageReset}, Path=Source}" RenderOptions.BitmapInterpolationMode="LowQuality"/>
            </Button>-->
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:MatrixEditor}" TargetType="ctrl:MatrixEditor" >
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:MatrixEditor">
          <UniformGrid Rows="4" Columns="4">
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M11, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M12, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M13, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M14, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M21, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M22, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M23, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M24, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M31, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M32, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M33, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M34, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M41, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M42, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M43, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <ctrl:NumericTextBox Margin="2" TextAlignment="Center" DisplayUpDownButtons="False" SelectAllOnFocus="True"
                                 Value="{Binding M44, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={cvt:ToDouble}}"
                                 WatermarkContent="{Binding WatermarkContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                 WatermarkContentTemplate="{Binding WatermarkContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
          </UniformGrid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:TextLogViewer}" TargetType="ctrl:TextLogViewer" BasedOn="{StaticResource DefaultLogViewerStyle}" >
    <Setter Property="DebugBrush" Value="{StaticResource TextLogDebugBrush}"/>
    <Setter Property="VerboseBrush" Value="{StaticResource TextLogVerboseBrush}"/>
    <Setter Property="InfoBrush" Value="{StaticResource TextLogInfoBrush}"/>
    <Setter Property="WarningBrush" Value="{StaticResource TextLogWarningBrush}"/>
    <Setter Property="ErrorBrush" Value="{StaticResource TextLogErrorBrush}"/>
    <Setter Property="FatalBrush" Value="{StaticResource TextLogFatalBrush}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ctrl:TextLogViewer">
          <DockPanel>
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" IsVisible="{Binding IsToolBarVisible, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <ItemsControl  IsVisible="{Binding CanClearLog, RelativeSource={RelativeSource Mode=TemplatedParent}}">
	<ItemsControl.ItemsPanel>
		<ItemsPanelTemplate>
			<StackPanel Orientation="Horizontal">
			</StackPanel>
		</ItemsPanelTemplate>
	</ItemsControl.ItemsPanel>
                <Button x:Name="PART_ClearLog" ToolTip.Tip="{sd:Localize Clear Log, Context=ToolTip}">
                  <Path Width="12" Height="12" Stretch="Uniform" Fill="{DynamicResource TextBrush}" Data="{StaticResource GeometryDelete}"/>
                </Button>
              </ItemsControl>
              <HeaderedItemsControl  Header="Filters:" IsVisible="{Binding CanFilterLog, RelativeSource={RelativeSource Mode=TemplatedParent}}">
	<ItemsControl.ItemsPanel>
		<ItemsPanelTemplate>
			<StackPanel Orientation="Horizontal">
			</StackPanel>
		</ItemsPanelTemplate>
	</ItemsControl.ItemsPanel>
                <ToggleButton IsChecked="{Binding ShowDebugMessages, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTip.Tip="{sd:Localize Toggle Debug, Context=ToolTip}">
                  <Path Width="12" Height="12" Stretch="Uniform" Fill="{DynamicResource TextLogDebugBrush}" Data="{StaticResource GeometryDebugMessage}"/>
                </ToggleButton>
                <ToggleButton IsChecked="{Binding ShowVerboseMessages, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTip.Tip="{sd:Localize Toggle Verbose, Context=ToolTip}">
                  <Path Width="12" Height="12" Stretch="Uniform" Fill="{DynamicResource TextLogVerboseBrush}" Data="{StaticResource GeometryVerboseMessage}"/>
                </ToggleButton>
                <ToggleButton IsChecked="{Binding ShowInfoMessages, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTip.Tip="{sd:Localize Toggle Info, Context=ToolTip}">
                  <Path Width="12" Height="12" Stretch="Uniform" Fill="{DynamicResource TextLogInfoBrush}" Data="{StaticResource GeometryInfoMessage}"/>
                </ToggleButton>
                <ToggleButton IsChecked="{Binding ShowWarningMessages, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTip.Tip="{sd:Localize Toggle Warning, Context=ToolTip}">
                  <Path Width="12" Height="12" Stretch="Uniform" Fill="{DynamicResource TextLogWarningBrush}" Data="{StaticResource GeometryWarningMessage}"/>
                </ToggleButton>
                <ToggleButton IsChecked="{Binding ShowErrorMessages, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTip.Tip="{sd:Localize Toggle Error, Context=ToolTip}">
                  <Path Width="12" Height="12" Stretch="Uniform" Fill="{DynamicResource TextLogErrorBrush}" Data="{StaticResource GeometryErrorMessage}"/>
                </ToggleButton>
                <ToggleButton IsChecked="{Binding ShowFatalMessages, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTip.Tip="{sd:Localize Toggle Fatal, Context=ToolTip}">
                  <Path Width="12" Height="12" Stretch="Uniform" Fill="{DynamicResource TextLogFatalBrush}" Data="{StaticResource GeometryFatalMessage}"/>
                </ToggleButton>
                <ToggleButton IsChecked="{Binding ShowStacktrace, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTip.Tip="{sd:Localize Toggle Exception Stack Trace, Context=ToolTip}">
                  <Label Content="(...)" Width="16" Height="12" FontSize="10" HorizontalContentAlignment="Center" />
                </ToggleButton>
              </HeaderedItemsControl>
              <HeaderedItemsControl  Header="Search:" IsVisible="{Binding CanSearchLog, RelativeSource={RelativeSource Mode=TemplatedParent}}">
	<ItemsControl.ItemsPanel>
		<ItemsPanelTemplate>
			<StackPanel Orientation="Horizontal">
			</StackPanel>
		</ItemsPanelTemplate>
	</ItemsControl.ItemsPanel>
                <ctrl:TextBox UseTimedValidation="True" Width="150" Text="{Binding SearchToken, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWayToSource}" WatermarkContent="Search"/>
                <Button x:Name="PART_PreviousResult" ToolTip.Tip="{sd:Localize Go to previous search result, Context=ToolTip}">
                  <Path Width="8" Height="8" Stretch="Uniform" Fill="{DynamicResource TextBrush}" Data="{StaticResource GeometryPrevious}"/>
                </Button>
                <Button x:Name="PART_NextResult" ToolTip.Tip="{sd:Localize Go to next search result, Context=ToolTip}">
                  <Path Width="8" Height="8" Stretch="Uniform" Fill="{DynamicResource TextBrush}" Data="{StaticResource GeometryNext}"/>
                </Button>
                <ToggleButton IsChecked="{Binding SearchMatchCase, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTip.Tip="{sd:Localize Match case, Context=ToolTip}">
                  <Path Width="16" Height="16" Stretch="Uniform" Fill="{DynamicResource TextBrush}" Data="{StaticResource GeometryMatchCase}"/>
                </ToggleButton>
                <ToggleButton IsChecked="{Binding SearchMatchWord, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTip.Tip="{sd:Localize Match whole word, Context=ToolTip}">
                  <Path Width="16" Height="16" Stretch="Uniform" Fill="{DynamicResource TextBrush}" Data="{StaticResource GeometryMatchWord}"/>
                </ToggleButton>
              </HeaderedItemsControl>
            </StackPanel>
            <TextBox x:Name="PART_LogTextBox" IsReadOnly="True"   FontFamily="Consolas, Courrier New" FontSize="11"/>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <Pen x:Key="GlyphPen" Brush="{StaticResource GlyphBrush}"/>

  <ControlTheme x:Key="{x:Type ctrl:ScaleBar}" TargetType="{x:Type ctrl:ScaleBar}" >
    <Setter Property="Foreground" Value="{StaticResource GlyphBrush}"/>
    <Setter Property="SmallTickPen" Value="{StaticResource GlyphPen}"/>
    <Setter Property="LargeTickPen" Value="{StaticResource GlyphPen}"/>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type Image}" TargetType="{x:Type Image}" >
    
    
    
  </ControlTheme>

  <!--  TREE VIEWS  -->
  <ControlTheme x:Key="{x:Type ctrl:TreeView}" TargetType="{x:Type ctrl:TreeView}" >
    <ControlTheme.Resources>
      <ResourceDictionary />
    </ControlTheme.Resources>
    <Setter Property="Panel.Background" Value="{StaticResource ControlBackgroundBrush}"/>
    
    <Setter Property="Border.BorderBrush" Value="{StaticResource SolidBorderBrush}" />
    <Setter Property="Border.BorderThickness" Value="0" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="TextElement.Foreground" Value="{StaticResource TextBrush}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <!-- <Setter Property=\"VerticalAlignment\" Value=\"Center\" /> -->
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:TreeView}">
          <Border BorderThickness="{TemplateBinding Border.BorderThickness}"
                            BorderBrush="{TemplateBinding Border.BorderBrush}" Name="Bd" >
            <ScrollViewer  x:Name="PART_Scroller"
                                HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                Background="{TemplateBinding Panel.Background}"
                                
                                
                                Focusable="False">
              <ItemsPresenter x:Name="content" DockPanel.Dock="Top" />
            </ScrollViewer>
          </Border>
          <!-- <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="Panel.Background" TargetName="Bd">
                <Setter.Value>
                  <DynamicResource ResourceKey="{x:Static SystemColors.ControlBrushKey}" />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ctrl:TreeViewItem}" TargetType="{x:Type ctrl:TreeViewItem}" >
    <ControlTheme.Resources>
      <ResourceDictionary />
    </ControlTheme.Resources>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="HorizontalAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Left}" />
    <Setter Property="VerticalAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Center}" />
    <Setter Property="Padding" Value="1,4" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Margin" Value="0" />
    
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:TreeViewItem}">
          <StackPanel Background="Transparent" x:Name="stacki">
            <Grid x:Name="border" Background="Transparent"  VerticalAlignment="Center">
              <Rectangle x:Name="Background" IsHitTestVisible="False" Opacity="1" Fill="{TemplateBinding Background}"/>
              <Rectangle x:Name="HoverRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource NormalBrush}"/>
              <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource SelectedBackgroundBrush}"/>
              <DockPanel x:Name="ct" Margin="{TemplateBinding Padding}">
                <Control DockPanel.Dock="Left" Margin="{Binding Offset, RelativeSource={RelativeSource TemplatedParent}, Converter={cvt:NumericToThickness}, ConverterParameter={me:Thickness 1,0,0,0}}"/>
                <ToggleButton DockPanel.Dock="Left"
                                    IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type ctrl:TreeViewItem}},Path=IsExpanded,FallbackValue={me:False}}"
                                    IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type ctrl:TreeViewItem}},Path=HasItems}"
                                    ClickMode="Press" Name="Expander" HorizontalAlignment="Right">
                  <ToggleButton.Theme>
                    <ControlTheme TargetType="{x:Type ToggleButton}" >
                      <ControlTheme.Resources>
                        <ResourceDictionary />
                      </ControlTheme.Resources>
                      <Setter Property="Focusable" Value="False" />
                      <Setter Property="Width" Value="8" />
                      <Setter Property="Height" Value="8" />
                      <Setter Property="Margin" Value="0,0,4,0" />
                      <Setter Property="Template" Value="{StaticResource TreeExpanderToggleButton}"/>
                    </ControlTheme>
                  </ToggleButton.Theme>
                </ToggleButton>
                <ContentPresenter x:Name="content"
                                  
                                  Content="{TemplateBinding HeaderedContentControl.Header}"
                                  ContentTemplate="{TemplateBinding HeaderTemplate}"
                                  
                                  
                                  
                                  HorizontalAlignment="{TemplateBinding ContentControl.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding ContentControl.VerticalContentAlignment}"
                                   >
	<!-- <ContentPresenter x:Name="content"
                                  
                                  Content="{TemplateBinding HeaderedContentControl.Header}"
                                  ContentTemplate="{TemplateBinding HeaderTemplate}"
                                  
                                  ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                  ContentSource="Header"
                                  HorizontalAlignment="{TemplateBinding ContentControl.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding ContentControl.VerticalContentAlignment}"
                                   > -->
                  <ContentPresenter.Resources>
                    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}" >
                      <!-- <ControlTheme.Triggers>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:TreeViewItem}}, Mode=OneWay}" Value="True">
                          <Setter Property="Foreground" Value="{StaticResource SelectedTextBrush}"/>
                        </DataTrigger>
                      </ControlTheme.Triggers> -->
                    </ControlTheme>
                  </ContentPresenter.Resources>
                </ContentPresenter>
              </DockPanel>
              <Rectangle x:Name="FocusVisualElement" Stroke="#4CFFFFFF" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" IsHitTestVisible="False" Margin="1,1,1,1"/>
            </Grid>
            <ItemsPresenter x:Name="itemsPresenter" IsVisible="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
          </StackPanel>
          <!-- <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsFocused" Value="True" />
                <Condition Property="IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="Opacity" TargetName="FocusVisualElement" Value="1"/>
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Opacity" TargetName="SelectedRectangle" Value="1"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" SourceName="border"/>
                <Condition Property="Selector.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="Opacity" TargetName="HoverRectangle" Value="1"/>
            </MultiTrigger>
            

            <Trigger Property="ctrl:TreeViewItem.IsEditing" Value="True">
              <Setter TargetName="content" Property="ContentPresenter.ContentTemplate"
                      Value="{Binding TemplateEdit, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ctrl:TreeViewItem}, AncestorLevel=1}}"/>
              <Setter TargetName="content" Property="ContentPresenter.ContentTemplateSelector"
                      Value="{Binding TemplateSelectorEdit, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ctrl:TreeViewItem}, AncestorLevel=1}}"/>
              <Setter Property="Padding" Value="0" />
            </Trigger>
          </ControlTemplate.Triggers> -->
        <!--	<Style Selector="^:disabled">

              <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            	</Style>
--></ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="TransparentButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Foreground" Value="White"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid x:Name="Grid" Opacity="0.8">
            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Grid>
          <!-- <ControlTemplate.Triggers>
            
            
          </ControlTemplate.Triggers> -->
        <!----></ControlTemplate>
      </Setter.Value>
    </Setter>
  	<Style Selector="^:disabled">

              		<Style Selector="^ /template/ Grid#Grid">
			<Setter Property="Opacity" Value="0.5"/>
		</Style>

            	</Style>
	<Style Selector="^:pointerover">

              		<Style Selector="^ /template/ Grid#Grid">
			<Setter Property="Opacity" Value="1.0"/>
		</Style>

            	</Style>
</ControlTheme>
</ResourceDictionary>
