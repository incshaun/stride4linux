<UserControl x:Class="Stride.Assets.Presentation.AssetEditors.UIEditor.Views.UIEditorView"
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:uevm="clr-namespace:Stride.Assets.Presentation.AssetEditors.UIEditor.ViewModels;assembly=Stride.Assets.Presentation"
             xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
             xmlns:cm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
             xmlns:cmd="clr-namespace:Stride.Core.Presentation.Commands;assembly=Stride.Core.Presentation.Avalonia"
             xmlns:panels="clr-namespace:Stride.UI.Panels;assembly=Stride.UI"
             xmlns:views="clr-namespace:Stride.Assets.Presentation.AssetEditors.AssetCompositeGameEditor.Views"
             xmlns:views1="clr-namespace:Stride.Assets.Presentation.AssetEditors.UIEditor.Views"
             xmlns:sd="http://schemas.stride3d.net/xaml/presentation"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
            >
	<Design.DataContext>
		<uevm:UIEditorBaseViewModel />
	</Design.DataContext>
  <Control.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceInclude Source="avares://Stride.Core.Assets.Editor.Avalonia/View/CommonResources.axaml" />
        <ResourceInclude Source="avares://Stride.Assets.Presentation.Avalonia/View/ImageDictionary.axaml" />
      </ResourceDictionary.MergedDictionaries>

      <!--<CollectionViewSource x:Key="FactoryCollection" Source="{Binding Factories, Mode=OneWay}">
        <CollectionViewSource.GroupDescriptions>
          <PropertyGroupDescription Converter="{views1:UIElementFactoryTypeConverter}" />
          <PropertyGroupDescription PropertyName="Category" />
        </CollectionViewSource.GroupDescriptions>
        <CollectionViewSource.SortDescriptions>
          <cm:SortDescription PropertyName="Category" />
          <cm:SortDescription PropertyName="Name" />
        </CollectionViewSource.SortDescriptions>
      <)/CollectionViewSource>-->

      <ContextMenu x:Key="TreeViewContextMenu" >
<!--       <ContextMenu x:Key="UIElementMenus" > -->
<!--       <x:Array Type="{x:Type Control}" x:Key="UIElementMenus" > -->
	<Design.DataContext>
		<uevm:UIElementViewModel />
	</Design.DataContext>
        <!-- Layout tools -->
        <MenuItem Header="{sd:Localize Layout, Context=Menu}" Theme="{StaticResource MenuGroupSeparatorStyle}" />
        <MenuItem Header="{sd:Localize Group into, Context=Menu}" ItemsSource="{Binding Path=DataContext.PanelFactories, Source={sd:XamlRoot}, Mode=OneWay}"
                 >
          <ItemsControl.ItemContainerTheme>
            <ControlTheme TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}" >
              <Setter Property="Header" Value="{Binding Name, Mode=OneWay}" />
              <Setter Property="Command" Value="{Binding DataContext.GroupIntoCommand, Source={sd:XamlRoot}}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
            </ControlTheme>
          </ItemsControl.ItemContainerTheme>
        </MenuItem>
        <Separator IsVisible="{Binding Converter={sd:MatchType}, ConverterParameter={x:Type uevm:PanelViewModel}, FallbackValue={sd:False}}" />
        <MenuItem Header="{sd:Localize Ungroup, Context=Menu}" Command="{Binding UngroupCommand}"
                 
                  IsVisible="{Binding Converter={sd:MatchType}, ConverterParameter={x:Type uevm:PanelViewModel}, FallbackValue={sd:False}}"
                  />
	<Design.DataContext>
		<uevm:PanelViewModel />
	</Design.DataContext>
        <MenuItem Header="{sd:Localize Change layout type, Context=Menu}" ItemsSource="{Binding Path=DataContext.PanelFactories, Source={sd:XamlRoot}, Mode=OneWay}"
                  IsVisible="{Binding Converter={sd:MatchType}, ConverterParameter={x:Type uevm:PanelViewModel}, FallbackValue={sd:False}}"
                 >
	<Design.DataContext>
		<uevm:PanelViewModel />
	</Design.DataContext>
          <ItemsControl.ItemContainerTheme>
            <ControlTheme TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}" >
              <Setter Property="Header" Value="{Binding Name, Mode=OneWay}" />
              <Setter Property="Command" Value="{Binding DataContext.ChangeLayoutTypeCommand, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
            </ControlTheme>
          </ItemsControl.ItemContainerTheme>
        </MenuItem>

        <!-- Canvas tools -->
        <MenuItem x:Name="CanvasToolsMenu" Theme="{StaticResource MenuGroupSeparatorStyle}"
                  Header="{Binding Parent.AssetSideUIElement, Converter={sd:ObjectToTypeName}}"
                  IsVisible="{Binding Parent.AssetSideUIElement, Converter={sd:MatchType}, ConverterParameter={x:Type panels:Canvas}, FallbackValue={sd:False}}" />
        <MenuItem Header="{sd:Localize Pin origin, Context=Menu}"
                  IsVisible="{Binding Parent.AssetSideUIElement, Converter={sd:MatchType}, ConverterParameter={x:Type panels:Canvas}, FallbackValue={sd:False}}">
          <!-- TODO: use a more graphical tool such as
          
                     TOP
                ■═════●═════■              ╔════════╗
                ║           ║              ║  BACK  ║
                ║           ║        ╔═════╩╦═╗     ║
           LEFT ●     □     ● RIGHT  ║      ╚═╣     ║
                ║           ║        ║  FRONT ╠═════╝
                ║           ║        ║        ║
                ■═════●═════■        ╚════════╝
                   BOTTOM
          -->
          <MenuItem Header="{sd:Localize Top left, Context=Menu}"     Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinTopLeft}" />
          <MenuItem Header="{sd:Localize Top, Context=Menu}"          Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinTop}" />
          <MenuItem Header="{sd:Localize Top right, Context=Menu}"    Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinTopRight}" />
          <MenuItem Header="{sd:Localize Left, Context=Menu}"         Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinLeft}" />
          <MenuItem Header="{sd:Localize Center, Context=Menu}"       Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinCenter}" />
          <MenuItem Header="{sd:Localize Right, Context=Menu}"        Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinRight}" />
          <MenuItem Header="{sd:Localize Bottom left, Context=Menu}"  Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinBottomLeft}" />
          <MenuItem Header="{sd:Localize Bottom, Context=Menu}"       Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinBottom}" />
          <MenuItem Header="{sd:Localize Bottom right, Context=Menu}" Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinBottomRight}" />
          <MenuItem Header="{sd:Localize Front, Context=Menu}"        Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinFront}" />
          <MenuItem Header="{sd:Localize Middle, Context=Menu}"       Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinMiddle}" />
          <MenuItem Header="{sd:Localize Back, Context=Menu}"         Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.PinBack}" />
        </MenuItem>
        
        <!-- Grid tools -->
        <MenuItem x:Name="GridToolsMenu" Theme="{StaticResource MenuGroupSeparatorStyle}"
                  Header="{Binding Parent.AssetSideUIElement, Converter={sd:ObjectToTypeName}}"
                  IsVisible="{Binding Parent.AssetSideUIElement, Converter={sd:MatchType}, ConverterParameter={x:Type panels:GridBase}, FallbackValue={sd:False}}" />
        <MenuItem Header="{sd:Localize Row, Context=Menu}"
                  IsVisible="{Binding Parent.AssetSideUIElement, Converter={sd:MatchType}, ConverterParameter={x:Type panels:GridBase}, FallbackValue={sd:False}}">
          <MenuItem Header="{sd:Localize Move up, Context=Menu}" Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.MoveUp}" />
          <MenuItem Header="{sd:Localize Move down, Context=Menu}" Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.MoveDown}" />
        </MenuItem>
        <MenuItem Header="{sd:Localize Column, Context=Menu}"
                  IsVisible="{Binding Parent.AssetSideUIElement, Converter={sd:MatchType}, ConverterParameter={x:Type panels:GridBase}, FallbackValue={sd:False}}">
          <MenuItem Header="{sd:Localize Move left, Context=Menu}" Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.MoveLeft}" />
          <MenuItem Header="{sd:Localize Move right, Context=Menu}" Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.MoveRight}" />
        </MenuItem>
        <MenuItem Header="{sd:Localize Layer, Context=Menu}"
                  IsVisible="{Binding Parent.AssetSideUIElement, Converter={sd:MatchType}, ConverterParameter={x:Type panels:GridBase}, FallbackValue={sd:False}}">
          <MenuItem Header="{sd:Localize Move back, Context=Menu}" Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.MoveBack}" />
          <MenuItem Header="{sd:Localize Move front, Context=Menu}" Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.MoveFront}" />
        </MenuItem>

        <!-- StackPanel tools -->
        <MenuItem x:Name="StackPanelToolsMenu" Theme="{StaticResource MenuGroupSeparatorStyle}"
                  Header="{Binding Parent.AssetSideUIElement, Converter={sd:ObjectToTypeName}}"
                  IsVisible="{Binding Parent.AssetSideUIElement, Converter={sd:MatchType}, ConverterParameter={x:Type panels:StackPanel}, FallbackValue={sd:False}}" />
        <MenuItem Header="{sd:Localize Move up, Context=Menu}"
                  IsVisible="{Binding Parent.AssetSideUIElement, Converter={sd:MatchType}, ConverterParameter={x:Type panels:StackPanel}, FallbackValue={sd:False}}"
                  Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.MoveUp}" />
        <MenuItem Header="{sd:Localize Move down, Context=Menu}"
                  IsVisible="{Binding Parent.AssetSideUIElement, Converter={sd:MatchType}, ConverterParameter={x:Type panels:StackPanel}, FallbackValue={sd:False}}"
                  Command="{Binding PanelCommand}" CommandParameter="{x:Static uevm:PanelCommandMode.MoveDown}" />

        <!-- Other available actions -->
        <MenuItem Header="{sd:Localize Action, Context=Menu}" Theme="{StaticResource MenuGroupSeparatorStyle}" />
        <MenuItem Header="{sd:Localize Open library in editor, Context=Menu}" Command="{Binding DataContext.OpenLibraryEditorCommand, Source={sd:XamlRoot}, FallbackValue={x:Static cmd:DisabledCommand.Instance}}" />
        <MenuItem Header="{sd:Localize Select library in asset view, Context=Menu}" Command="{Binding DataContext.SelectLibraryCommand, Source={sd:XamlRoot}, FallbackValue={x:Static cmd:DisabledCommand.Instance}}" />
        <MenuItem Header="{sd:Localize Break link to library, Context=Menu}" Command="{Binding DataContext.BreakLinkToLibraryCommand, Source={sd:XamlRoot}, FallbackValue={x:Static cmd:DisabledCommand.Instance}}" />
        <!-- Create other assets from selection -->
        <MenuItem Header="{sd:Localize Create page from selection, Context=Menu}" Command="{Binding DataContext.CreatePageCommand, Source={sd:XamlRoot}, FallbackValue={x:Static cmd:DisabledCommand.Instance}}" />
        <MenuItem Header="{sd:Localize Create library from selection, Context=Menu}" Command="{Binding DataContext.CreateLibraryCommand, Source={sd:XamlRoot}, FallbackValue={x:Static cmd:DisabledCommand.Instance}}" />
        <Separator/>
        <MenuItem Header="{sd:Localize Duplicate, Context=Menu}" InputGesture="Ctrl+D" Command="{Binding DataContext.DuplicateSelectionCommand, Source={sd:XamlRoot}, FallbackValue={x:Static cmd:DisabledCommand.Instance}}"/>
        <MenuItem Command="{x:Static sd:ApplicationCommands.Cut}" Icon="{sd:Image {StaticResource ImageCut}}" />
        <MenuItem Command="{x:Static sd:ApplicationCommands.Copy}" Icon="{sd:Image {StaticResource ImageCopy}}" />
<!--         <MenuItem Command="{x:Static sd:ApplicationCommands.Paste}" CommandParameter="{Binding Converter={sd:MatchType}, ConverterParameter={x:Type uevm:UIRootViewModel}, FallbackValue={sd:True}}" Icon="{sd:Image {StaticResource ImagePaste}}" /> -->
        <MenuItem Command="{x:Static sd:ApplicationCommands.Delete}" Icon="{sd:Image {StaticResource ImageDelete}}"/>
        <Separator/>
        <MenuItem Header="{sd:Localize Rename, Context=Menu}" Command="{Binding RenameCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}}" Icon="{sd:Image {StaticResource ImageRename}}" InputGesture="F2" />
      </ContextMenu>
<!--       <ContextMenu x:Key="TreeViewContextMenu" ItemsSource="{StaticResource UIElementMenus}"  /> -->
<!--       <ContextMenu x:Key="TreeViewContextMenu" ItemsSource="{StaticResource UIElementMenus}" /> -->
<!--	<Design.DataContext>
		<uevm:UIElementViewModel />
	</Design.DataContext>-->
      <ContextMenu x:Key="EditorViewContextMenu" >
	<Design.DataContext>
		<uevm:UIEditorBaseViewModel />
	</Design.DataContext>
        <i:Interaction.Behaviors>
          <sd:OnEventCommandBehavior EventName="Opened" EventOwnerType="{x:Type ContextMenu}" Command="{Binding RefreshSelectableElementsCommand}" />
          <!-- For some unknown reason, the command bindings defined globally are not working in this context menu. So we rebind them here. -->
          <sd:CommandBindingBehavior RoutedCommand="{x:Static sd:ApplicationCommands.Cut}" Command="{Binding CutCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/>
          <sd:CommandBindingBehavior RoutedCommand="{x:Static sd:ApplicationCommands.Copy}" Command="{Binding CopyCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/>
          <!-- <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Paste" Command="{Binding PasteCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/> -->
          <!-- <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Delete" Command="{Binding DeleteCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/> -->
        </i:Interaction.Behaviors>
        <!-- Set current selection -->
        <MenuItem x:Name="SetCurrentSelectionMenu" Header="Set current selection" ItemsSource="{Binding SelectableElements}"
                  IsVisible="{Binding HasItems, RelativeSource={RelativeSource Self}}">
          <ItemsControl.ItemContainerTheme>
            <ControlTheme TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}" >
	<Design.DataContext>
		<uevm:UIElementViewModel />
	</Design.DataContext>
              <Setter Property="Command" Value="{Binding DataContext.SetCurrentSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
              <Setter Property="CommandParameter" Value="{Binding Id, Mode=OneWay, FallbackValue={sd:Guid}}" />
<!--              <Setter Property="IsChecked" Value="{sd:MultiBinding {Binding}, {Binding DataContext.LastSelectedElement, Source={sd:XamlRoot}}, Converter={sd:AllEqualMultiConverter}, Mode=OneWay, FallbackValue={sd:False}}" />-->
            </ControlTheme>
          </ItemsControl.ItemContainerTheme>
          <ItemsControl.ItemTemplate>
            <DataTemplate>
              <StackPanel Orientation="Horizontal">
                <TextBlock VerticalAlignment="Center">
                  <Run Text="{Binding Mode=OneWay}" />
                </TextBlock>
              </StackPanel>
            </DataTemplate>
          </ItemsControl.ItemTemplate>
        </MenuItem>
        <!-- UIElement context menu -->
        <!-- IsCheckable=True is a hack to prevent WPF from clearing the selected sub menu item -->
<!--        <MenuItem DataContext="{Binding LastSelectedElement}" ItemsSource="{StaticResource UIElementMenus}"
                  IsVisible="{Binding Converter={sd:ObjectToBool}}, FallbackValue={sd:False}}"
                  StaysOpenOnClick="True" >
          <MenuItem.Template>
            <ControlTemplate TargetType="{x:Type MenuItem}">
              <StackPanel  />
            </ControlTemplate>
          </MenuItem.Template>
        </MenuItem>-->
        <!-- View options -->
        <MenuItem Header="{sd:Localize View, Context=Menu}" Theme="{StaticResource MenuGroupWithItemsStyle}">
          <MenuItem Header="{sd:Localize Zoom in, Context=Menu}" Command="{Binding ZoomInCommand}" />
          <MenuItem Header="{sd:Localize Zoom out, Context=Menu}" Command="{Binding ZoomOutCommand}" />
          <MenuItem Header="{sd:Localize Reset camera, Context=Menu}" Command="{Binding Camera.ResetCameraCommand}" />
        </MenuItem>
      </ContextMenu>
    </ResourceDictionary>
  </Control.Resources>
<!--  <UserControl.InputBindings>
    
  </UserControl.InputBindings>-->
  <i:Interaction.Behaviors>
    <!-- These commands are available globally in the editor.
         Note: this also allows the Edit menu (main menus) to be properly updated. -->
    <sd:CommandBindingBehavior RoutedCommand="{x:Static sd:ApplicationCommands.Cut}" Command="{Binding CutCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/>
    <sd:CommandBindingBehavior RoutedCommand="{x:Static sd:ApplicationCommands.Copy}" Command="{Binding CopyCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/>
    <!-- <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Paste" Command="{Binding PasteCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/> -->
    <!-- <sd:CommandBindingBehavior RoutedCommand="ApplicationCommands.Delete" Command="{Binding DeleteCommand, FallbackValue={x:Static cmd:DisabledCommand.Instance}, Mode=OneWay}"/> -->
  </i:Interaction.Behaviors>

  <Grid>
    <!-- Loading Message -->
    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center"
                IsVisible="{Binding Converter={sd:ObjectToBool}, ConverterParameter={sd:False}, FallbackValue={sd:True}}">
      <TextBlock Text="{sd:Localize Loading...}" Margin="20" HorizontalAlignment="Center" />
      <TextBlock Text="{sd:Localize This might take a few minutes the first time.}" Margin="20" HorizontalAlignment="Center" />
      <ProgressBar IsIndeterminate="True" Width="200" Height="20" Margin="20" BorderThickness="1" />
    </StackPanel>
    <!-- UI Editor -->
    <Grid IsVisible="{Binding Converter={sd:ObjectToBool}}, FallbackValue={sd:False}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="5" />
        <ColumnDefinition Width="3*" />
      </Grid.ColumnDefinitions>

      <!-- Left Panel -->
      <DockPanel Grid.Column="0">
        <Border DockPanel.Dock="Top">
          <Button Content="{sd:Localize UI properties, Context=Button}" Margin="8" Padding="4" Command="{Binding ShowPropertiesCommand}" />
        </Border>
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="5" />
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>

          <!-- UI Library -->
          <DockPanel Grid.Row="0">
            <TextBlock DockPanel.Dock="Top" Margin="4"  FontWeight="Bold" Text="{sd:Localize UI library}" />
<!--               <ListBox ItemsSource="{Binding Source={StaticResource FactoryCollection}, Mode=OneWay}"> -->
              <ListBox ItemsSource="{Binding Factories, Mode=OneWay}">
              <i:Interaction.Behaviors>
                <sd:ListBoxDragDropBehavior DragVisualTemplate="{StaticResource DragVisualTemplate}" CanDrag="True" CanDrop="False" CanInsert="False" />
              </i:Interaction.Behaviors>
<!--              <ListBox.GroupStyle>
                  <GroupStyle >
                    <GroupStyle.ContainerStyle>
                      <ControlTheme x:Key="{x:Type GroupItem}" TargetType="{x:Type GroupItem}" >
                        <Setter Property="Template">
                          <Setter.Value>
                            <ControlTemplate TargetType="{x:Type GroupItem}">-->
                              <!-- Grouping will create a CollectionViewGroup, so we bind to its Name property -->
<!--                              <Expander IsExpanded="True">
                                <Expander.Header>
                                  <TextBlock Text="{Binding Name, Mode=OneWay}" FontWeight="Bold" />
                                </Expander.Header>
                                <ItemsPresenter />
                              </Expander>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                      </ControlTheme>
                    </GroupStyle.ContainerStyle>
                  </GroupStyle>
              </ListBox.GroupStyle>-->
              <ListBox.ItemContainerTheme>
                <ControlTheme TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}" >
                  <Setter Property="HorizontalAlignment" Value="Stretch" />
                </ControlTheme>
              </ListBox.ItemContainerTheme>
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding Name, Mode=OneWay}" />
                </DataTemplate>
              </ItemsControl.ItemTemplate>
              </ListBox>
          </DockPanel>

          <GridSplitter Grid.Row="1" ResizeBehavior="PreviousAndNext" />

          <!-- Visual Tree -->
          <DockPanel Grid.Row="2">
            <TextBlock DockPanel.Dock="Top" Margin="4"  FontWeight="Bold" Text="Visual Tree" />
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
              <ItemsControl>
	<ItemsControl.ItemsPanel>
		<ItemsPanelTemplate>
			<StackPanel Orientation="Horizontal">
			</StackPanel>
		</ItemsPanelTemplate>
	</ItemsControl.ItemsPanel>
                <Button Command="{x:Static views:AssetCompositeHierarchyTreeViewHelper.ExpandAllItems}" CommandParameter="{Binding ElementName=HierarchyTreeView}"
                        ToolTip.Tip="{sd:Localize Expand all elements, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" >
                  <Image Source="{StaticResource ImageExpandAllFolders}" Stretch="None"/>
                </Button>
                <Button Command="{x:Static views:AssetCompositeHierarchyTreeViewHelper.CollapseAllItems}" CommandParameter="{Binding ElementName=HierarchyTreeView}"
                        ToolTip.Tip="{sd:Localize Collapse all elements, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}" >
                  <Image Source="{StaticResource ImageCollapseAllFolders}" Stretch="None"/>
                </Button>
              </ItemsControl>
            </StackPanel>
            <Grid>
            <TextBlock Text="{Binding RootPart.Children, Mode=OneWay}" />
              <sd:TreeView x:Name="HierarchyTreeView" ItemsSource="{Binding RootPart.Children, Mode=OneWay}" 
                             Grid.IsSharedSizeScope="True" >
<!--              <sd:TreeView x:Name="HierarchyTreeView" ItemsSource="{Binding RootPart.Children, Mode=OneWay}"  AllowDrop="True"
                             Grid.IsSharedSizeScope="True" HorizontalContentAlignment="Stretch">-->
                <sd:TreeView.DataTemplates>
                  <TreeDataTemplate DataType="{x:Type uevm:UIElementViewModel}" ItemsSource="{Binding Children, Mode=OneWay}">
<!--                     <Grid d:DataContext="{d:DesignInstance {x:Type uevm:UIElementViewModel}}"> -->
                    <Grid >
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="VisualChildrenCountGroup" />
                      </Grid.ColumnDefinitions>
                      <Grid.Theme>
                        <ControlTheme TargetType="{x:Type Grid}" >
                          <!-- <ControlTheme.Triggers>
                            --><!-- Display active root in Bold --><!--
                            <DataTrigger Binding="{sd:MultiBinding {Binding DataContext.ActiveRoot, Source={sd:XamlRoot}}, {Binding},
                                                                     Converter={sd:AllEqualMultiConverter}, FallbackValue={sd:False}}"
                                         Value="{sd:True}">
                              <Setter Property="TextBlock.FontWeight" Value="Bold" />
                            </DataTrigger>
                          </ControlTheme.Triggers> -->
                        </ControlTheme>
                      </Grid.Theme>

                      <StackPanel Grid.Column="0" VerticalAlignment="Center" Orientation="Horizontal">
                        <!-- TODO: image for each UI element type -->
                        <TextBlock Text="{Binding Name, Mode=OneWay}" Margin="0,0,4,0" />
                        <TextBlock Text="{Binding ElementType.Name, StringFormat={}[{0}], Mode=OneWay}" />
                        <TextBlock Text="{Binding SourceLibrary.Name, Mode=OneWay, StringFormat=(Library: {0}), FallbackValue={}}" Foreground="#FFB0FFD3" />
                      </StackPanel>
                      <TextBlock Grid.Column="1" VerticalAlignment="Center"
                                 Text="{Binding Children.Count, StringFormat={}({0}), Mode=OneWay}" IsVisible="{Binding Children.Count, Converter={sd:NumericToBool}}" />
                    </Grid>
                  </TreeDataTemplate>
                </sd:TreeView.DataTemplates>
                <i:Interaction.Behaviors>
                  <sd:DragOverAutoScrollBehavior />
                  <sd:TreeViewAutoExpandBehavior />
                  <sd:TreeViewDragDropBehavior DragVisualTemplate="{StaticResource DragVisualTemplate}" CanInsert="True" AllowDropOnEmptyArea="True" />
                  <sd:TreeViewBindableSelectedItemsBehavior SelectedItems="{Binding SelectedContent}" GiveFocusOnSelectionChange="False" />
                </i:Interaction.Behaviors>
                <sd:TreeView.ItemsPanel>
                  <ItemsPanelTemplate>
                    <sd:AVirtualizingTreePanel Background="Transparent" DataContext="{Binding RootPart}"
                                                ContextMenu="{StaticResource TreeViewContextMenu}"/>
                  </ItemsPanelTemplate>
                </sd:TreeView.ItemsPanel>
                <sd:TreeView.ItemContainerTheme>
                  <ControlTheme TargetType="{x:Type sd:TreeViewItem}" BasedOn="{StaticResource {x:Type sd:TreeViewItem}}" >
	<Design.DataContext>
		<uevm:UIElementViewModel />
	</Design.DataContext>
                    <Setter Property="ContextMenu" Value="{StaticResource TreeViewContextMenu}" />
<!--                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                    <Setter Property="IsEditable" Value="{Binding IsEditable, Mode=OneTime}" />
                    <Setter Property="IsEditing" Value="{Binding IsEditing, Mode=TwoWay}" />-->
<!--                    <Setter Property="TemplateEdit">
                      <Setter.Value>
                        <DataTemplate DataType="{x:Type uevm:UIElementViewModel}">
                          <StackPanel Orientation="Horizontal">
                            <sd:TextBox Text="{Binding Name, Mode=TwoWay}" GetFocusOnLoad="True" SelectAllOnFocus="True" Margin="2" />
                          </StackPanel>
                        </DataTemplate>
                      </Setter.Value>
                    </Setter>-->
<!--                    <Setter Property="sd:Interaction.Behaviors">
                      <Setter.Value>
                        <sd:BehaviorCollection>
                          <sd:TreeViewStopEditOnLostFocusBehavior />
                        </sd:BehaviorCollection>
                      </Setter.Value>
                    </Setter>-->
                  </ControlTheme>
                </sd:TreeView.ItemContainerTheme>
              </sd:TreeView>
            </Grid>
          </DockPanel>
        </Grid>
      </DockPanel>

      <GridSplitter Grid.Column="1" ResizeBehavior="PreviousAndNext" />
      
      <!-- Editor View -->
      <DockPanel Grid.Column="2">
        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" >
<!--        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" IsLocked="True">-->
          <ItemsControl>
	<ItemsControl.ItemsPanel>
		<ItemsPanelTemplate>
			<StackPanel Orientation="Horizontal">
			</StackPanel>
		</ItemsPanelTemplate>
	</ItemsControl.ItemsPanel>
            <Button Background="Transparent" Margin="2"
                    Content="{sd:Image {StaticResource ImageZoomDefault}, 16, 16, LowQuality}"
                    Command="{Binding ResetZoomCommand}"
                    ToolTip.Tip="{sd:Localize Reset zoom, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}"  />
            <Button Background="Transparent" Margin="2"
                    Content="{sd:Image {StaticResource ImageZoomOut}, 16, 16, LowQuality}"
                    Command="{Binding ZoomOutCommand}"
                    ToolTip.Tip="{sd:Localize Zoom out, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}"  />
            <Button Background="Transparent" Margin="2"
                    Content="{sd:Image {StaticResource ImageZoomIn}, 16, 16, LowQuality}"
                    Command="{Binding ZoomInCommand}"
                    ToolTip.Tip="{sd:Localize Zoom in, Context=ToolTip}" sd:ToolTipHelper.Status="{Binding Session.Editor.Status}"  />
          </ItemsControl>
          <ItemsControl>
	<ItemsControl.ItemsPanel>
		<ItemsPanelTemplate>
			<StackPanel Orientation="Horizontal">
			</StackPanel>
		</ItemsPanelTemplate>
	</ItemsControl.ItemsPanel>
            <sd:NumericTextBox Margin="2" Width="50" ToolTip.Tip="{sd:Localize Snaps to this value (0 to disable), Context=ToolTip}"
                                 Value="{Binding SnapValue}" DecimalPlaces="3" Minimum="0" />
          </ItemsControl>
          <ItemsControl>
	<ItemsControl.ItemsPanel>
		<ItemsPanelTemplate>
			<StackPanel Orientation="Horizontal">
			</StackPanel>
		</ItemsPanelTemplate>
	</ItemsControl.ItemsPanel>
            <ToggleButton x:Name="ToggleSettings" Content="{sd:Image {StaticResource ImageView}, 24, 24, LowQuality}" Background="Transparent">
              <i:Interaction.Behaviors>
                <sd:ToggleButtonPopupBehavior/>
              </i:Interaction.Behaviors>
            </ToggleButton>
            <Popup IsOpen="{Binding ElementName=ToggleSettings, Path=IsChecked}" IsLightDismissEnabled="True" PlacementTarget="{Binding ElementName=ToggleSettings}">
              <StackPanel Background="{StaticResource BackgroundBrush}">
                <Border Padding="8,2" Background="{StaticResource NormalBrush}" HorizontalAlignment="Stretch">
                  <TextBlock Text="{sd:Localize Colors}" FontWeight="Bold"/>
                </Border>
                <Grid Margin="4">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition MinWidth="80" />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>

                  <!-- Guideline -->
                  <TextBlock Grid.Row="0" Grid.Column="0" Margin="4" Text="{sd:Localize Guideline}" />
                  <ToggleButton Grid.Row="0" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"
                                x:Name="GuidelineToggle" Background="Transparent">
                    <Border BorderThickness="1" BorderBrush="{Binding GuidelineColor, Converter={sd:ColorConverter}}" Width="16" Height="16" />
                    <i:Interaction.Behaviors>
                      <sd:ToggleButtonPopupBehavior/>
                    </i:Interaction.Behaviors>
                  </ToggleButton>
                  <Popup Grid.Row="0" Grid.Column="1" IsOpen="{Binding IsChecked, ElementName=GuidelineToggle}" IsLightDismissEnabled="True">
                    <Grid Background="{StaticResource BackgroundBrush}">
                      <sd:ColorPicker Color="{Binding GuidelineColor, Converter={sd:ColorConverter}}"/>
                    </Grid>
                  </Popup>
                  <sd:NumericTextBox Grid.Row="0" Grid.Column="2" VerticalAlignment="Center"
                                       Value="{Binding GuidelineThickness, Mode=TwoWay}" DecimalPlaces="0" Minimum="1" />
                  <!-- Highlight -->
                  <TextBlock Grid.Row="1" Grid.Column="0" Margin="4" Text="{sd:Localize Highlight}" />
                  <ToggleButton Grid.Row="1" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"
                                x:Name="HighlightToggle" Background="Transparent">
                    <Border BorderThickness="1" BorderBrush="{Binding HighlightColor, Converter={sd:ColorConverter}}" Width="16" Height="16" />
                    <i:Interaction.Behaviors>
                      <sd:ToggleButtonPopupBehavior/>
                    </i:Interaction.Behaviors>
                  </ToggleButton>
                  <Popup Grid.Row="1" Grid.Column="1" IsOpen="{Binding IsChecked, ElementName=HighlightToggle}" IsLightDismissEnabled="True">
                    <Grid Background="{StaticResource BackgroundBrush}">
                      <sd:ColorPicker Color="{Binding HighlightColor, Converter={sd:ColorConverter}}"/>
                    </Grid>
                  </Popup>
                  <sd:NumericTextBox Grid.Row="1" Grid.Column="2" VerticalAlignment="Center"
                                       Value="{Binding HighlightThickness, Mode=TwoWay}" DecimalPlaces="0" Minimum="1" />
                  <!-- Selection -->
                  <TextBlock Grid.Row="2" Grid.Column="0" Margin="4" Text="{sd:Localize Selection}" />
                  <ToggleButton Grid.Row="2" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"
                                x:Name="SelectionToggle" Background="Transparent">
                    <Border BorderThickness="1" BorderBrush="{Binding SelectionColor, Converter={sd:ColorConverter}}" Width="16" Height="16" />
                    <i:Interaction.Behaviors>
                      <sd:ToggleButtonPopupBehavior/>
                    </i:Interaction.Behaviors>
                  </ToggleButton>
                  <Popup Grid.Row="2" Grid.Column="1" IsOpen="{Binding IsChecked, ElementName=SelectionToggle}" IsLightDismissEnabled="True">
                    <Grid Background="{StaticResource BackgroundBrush}">
                      <sd:ColorPicker Color="{Binding SelectionColor, Converter={sd:ColorConverter}}"/>
                    </Grid>
                  </Popup>
                  <sd:NumericTextBox Grid.Row="2" Grid.Column="2" VerticalAlignment="Center"
                                       Value="{Binding SelectionThickness, Mode=TwoWay}" DecimalPlaces="0" Minimum="1" />
                  <!-- Sizing -->
                  <TextBlock Grid.Row="3" Grid.Column="0" Margin="4" Text="{sd:Localize Sizing}" />
                  <ToggleButton Grid.Row="3" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"
                                x:Name="SizingToggle" Background="Transparent">
                    <Border BorderThickness="1" BorderBrush="{Binding SizingColor, Converter={sd:ColorConverter}}" Width="16" Height="16" />
                    <i:Interaction.Behaviors>
                      <sd:ToggleButtonPopupBehavior/>
                    </i:Interaction.Behaviors>
                  </ToggleButton>
                  <Popup Grid.Row="3" Grid.Column="1" IsOpen="{Binding IsChecked, ElementName=SizingToggle}" IsLightDismissEnabled="True">
                    <Grid Background="{StaticResource BackgroundBrush}">
                      <sd:ColorPicker Color="{Binding SizingColor, Converter={sd:ColorConverter}}"/>
                    </Grid>
                  </Popup>
                  <sd:NumericTextBox Grid.Row="3" Grid.Column="2" VerticalAlignment="Center"
                                       Value="{Binding SizingThickness, Mode=TwoWay}" DecimalPlaces="0" Minimum="1" />
                </Grid>
              </StackPanel>
            </Popup>
          </ItemsControl>
        </StackPanel>
<!--         <Grid Background="Transparent" Focusable="True" PreviewKeyDown="EditorPreviewKeyDown" ContextMenu="{StaticResource EditorViewContextMenu}"> -->
        <Grid Background="Transparent" Focusable="True" ContextMenu="{StaticResource EditorViewContextMenu}">
          <i:Interaction.Behaviors>
            <sd:FrameworkElementDragDropBehavior DragVisualTemplate="{StaticResource DragVisualTemplate}" CanDrag="False" />
          </i:Interaction.Behaviors>
          <Grid>
            <ContentPresenter x:Name="SceneView" IsVisible="{Binding LastException, Converter={sd:Chained {sd:ObjectToBool}, {sd:InvertBool}}}"/>
            
            <!-- Crash message -->
            <Grid IsVisible="{Binding LastException, Converter={sd:ObjectToBool}}">
              <Border HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      Background="{StaticResource BackgroundBrush}" />
              <Grid HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="{StaticResource ControlBackgroundBrush}"
                    MinWidth="400" MaxWidth="1200"
                    Margin="20">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBox Text="{Binding LastException.Message, StringFormat=Error: {0}, Mode=OneWay}" Foreground="{StaticResource TextBrush}" Margin="20"
                         IsReadOnly="True" TextWrapping="Wrap" BorderThickness="0" Background="Transparent" FontWeight="Bold"
                          ScrollViewer.HorizontalScrollBarVisibility="Hidden" FontSize="20"/>
                <TextBox Text="{Binding LastException, Mode=OneWay}" Foreground="{StaticResource TextBrush}" Margin="20"
                         IsReadOnly="True" TextWrapping="Wrap" BorderThickness="0" Background="Transparent" Grid.Row="1"
                          ScrollViewer.HorizontalScrollBarVisibility="Hidden" />
                <StackPanel Grid.Row="2" Orientation="Vertical" Margin="20">
                  <TextBlock Text="{sd:Localize Before you resume\, fix the failing asset (likely a UI page or UI library).}" Margin="0,0,0,4" HorizontalAlignment="Center"/>
                  <UniformGrid HorizontalAlignment="Center" Rows="1" Columns="2">
                    <Button Content="{sd:Localize Resume, Context=Button}" Command="{Binding ResumeCommand}"
                            Padding="24,8" HorizontalAlignment="Stretch" Margin="10,0"/>
                    <Button Content="{sd:Localize Copy error to clipboard, Context=Button}" Command="{Binding CopyErrorToClipboardCommand}"
                            Padding="24,8" HorizontalAlignment="Stretch" Margin="10,0"/>
                  </UniformGrid>
                </StackPanel>
              </Grid>
            </Grid>
          </Grid>
        </Grid>
      </DockPanel>
    </Grid>
  </Grid>
</UserControl>
